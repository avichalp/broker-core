// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	cid "github.com/ipfs/go-cid"
	chainapi "github.com/textileio/broker-core/chainapi"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ChainAPI is an autogenerated mock type for the ChainAPI type
type ChainAPI struct {
	mock.Mock
}

// HasDeposit provides a mock function with given fields: ctx, brokerID, accountID
func (_m *ChainAPI) HasDeposit(ctx context.Context, brokerID string, accountID string) (bool, error) {
	ret := _m.Called(ctx, brokerID, accountID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, brokerID, accountID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, brokerID, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayload provides a mock function with given fields: ctx, payloadCid, opts
func (_m *ChainAPI) UpdatePayload(ctx context.Context, payloadCid cid.Cid, opts ...chainapi.UpdatePayloadOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, payloadCid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid, ...chainapi.UpdatePayloadOption) error); ok {
		r0 = rf(ctx, payloadCid, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
