// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	cid "github.com/ipfs/go-cid"

	mock "github.com/stretchr/testify/mock"

	storagemarket "github.com/filecoin-project/go-fil-markets/storagemarket"

	store "github.com/textileio/broker-core/cmd/dealerd/store"
)

// FilClient is an autogenerated mock type for the FilClient type
type FilClient struct {
	mock.Mock
}

// CheckChainDeal provides a mock function with given fields: ctx, dealID
func (_m *FilClient) CheckChainDeal(ctx context.Context, dealID int64) (bool, uint64, bool, error) {
	ret := _m.Called(ctx, dealID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, dealID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, int64) uint64); ok {
		r1 = rf(ctx, dealID)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(context.Context, int64) bool); ok {
		r2 = rf(ctx, dealID)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, int64) error); ok {
		r3 = rf(ctx, dealID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// CheckDealStatusWithStorageProvider provides a mock function with given fields: ctx, storageProviderID, propCid
func (_m *FilClient) CheckDealStatusWithStorageProvider(ctx context.Context, storageProviderID string, propCid cid.Cid) (*storagemarket.ProviderDealState, error) {
	ret := _m.Called(ctx, storageProviderID, propCid)

	var r0 *storagemarket.ProviderDealState
	if rf, ok := ret.Get(0).(func(context.Context, string, cid.Cid) *storagemarket.ProviderDealState); ok {
		r0 = rf(ctx, storageProviderID, propCid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagemarket.ProviderDealState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, cid.Cid) error); ok {
		r1 = rf(ctx, storageProviderID, propCid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteAuctionDeal provides a mock function with given fields: ctx, ad, aud
func (_m *FilClient) ExecuteAuctionDeal(ctx context.Context, ad store.AuctionData, aud store.AuctionDeal) (cid.Cid, bool, error) {
	ret := _m.Called(ctx, ad, aud)

	var r0 cid.Cid
	if rf, ok := ret.Get(0).(func(context.Context, store.AuctionData, store.AuctionDeal) cid.Cid); ok {
		r0 = rf(ctx, ad, aud)
	} else {
		r0 = ret.Get(0).(cid.Cid)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, store.AuctionData, store.AuctionDeal) bool); ok {
		r1 = rf(ctx, ad, aud)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, store.AuctionData, store.AuctionDeal) error); ok {
		r2 = rf(ctx, ad, aud)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetChainHeight provides a mock function with given fields: ctx
func (_m *FilClient) GetChainHeight(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveDealIDFromMessage provides a mock function with given fields: ctx, proposalCid, publishDealMessage
func (_m *FilClient) ResolveDealIDFromMessage(ctx context.Context, proposalCid cid.Cid, publishDealMessage cid.Cid) (int64, error) {
	ret := _m.Called(ctx, proposalCid, publishDealMessage)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid, cid.Cid) int64); ok {
		r0 = rf(ctx, proposalCid, publishDealMessage)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cid.Cid, cid.Cid) error); ok {
		r1 = rf(ctx, proposalCid, publishDealMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
