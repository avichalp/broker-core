// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	keys "github.com/textileio/broker-core/cmd/neard/nearclient/keys"
)

// KeyPair is an autogenerated mock type for the KeyPair type
type KeyPair struct {
	mock.Mock
}

// GetPublicKey provides a mock function with given fields:
func (_m *KeyPair) GetPublicKey() keys.PublicKey {
	ret := _m.Called()

	var r0 keys.PublicKey
	if rf, ok := ret.Get(0).(func() keys.PublicKey); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(keys.PublicKey)
	}

	return r0
}

// Sign provides a mock function with given fields: message
func (_m *KeyPair) Sign(message []byte) ([]byte, error) {
	ret := _m.Called(message)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// String provides a mock function with given fields:
func (_m *KeyPair) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Verify provides a mock function with given fields: message, signature
func (_m *KeyPair) Verify(message []byte, signature []byte) bool {
	ret := _m.Called(message, signature)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, []byte) bool); ok {
		r0 = rf(message, signature)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
