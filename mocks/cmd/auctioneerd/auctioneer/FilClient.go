// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	peer "github.com/libp2p/go-libp2p-core/peer"
	mock "github.com/stretchr/testify/mock"
)

// FilClient is an autogenerated mock type for the FilClient type
type FilClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *FilClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChainHeight provides a mock function with given fields:
func (_m *FilClient) GetChainHeight() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyBidder provides a mock function with given fields: walletAddr, bidderSig, bidderID
func (_m *FilClient) VerifyBidder(walletAddr string, bidderSig []byte, bidderID peer.ID) (bool, error) {
	ret := _m.Called(walletAddr, bidderSig, bidderID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, []byte, peer.ID) bool); ok {
		r0 = rf(walletAddr, bidderSig, bidderID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte, peer.ID) error); ok {
		r1 = rf(walletAddr, bidderSig, bidderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
