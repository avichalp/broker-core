// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/textileio/broker-core/cmd/storaged/storage"
)

// Requester is an autogenerated mock type for the Requester type
type Requester struct {
	mock.Mock
}

// CreateFromReader provides a mock function with given fields: ctx, r, meta
func (_m *Requester) CreateFromReader(ctx context.Context, r io.Reader, meta storage.Metadata) (storage.Request, error) {
	ret := _m.Called(ctx, r, meta)

	var r0 storage.Request
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, storage.Metadata) storage.Request); ok {
		r0 = rf(ctx, r, meta)
	} else {
		r0 = ret.Get(0).(storage.Request)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, io.Reader, storage.Metadata) error); ok {
		r1 = rf(ctx, r, meta)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *Requester) Get(ctx context.Context, id string) (storage.Request, error) {
	ret := _m.Called(ctx, id)

	var r0 storage.Request
	if rf, ok := ret.Get(0).(func(context.Context, string) storage.Request); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(storage.Request)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAuthorized provides a mock function with given fields: ctx, identity
func (_m *Requester) IsAuthorized(ctx context.Context, identity string) (bool, string, error) {
	ret := _m.Called(ctx, identity)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, identity)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, identity)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, identity)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
