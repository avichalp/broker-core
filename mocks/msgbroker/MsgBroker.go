// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	msgbroker "github.com/textileio/broker-core/msgbroker"
)

// MsgBroker is an autogenerated mock type for the MsgBroker type
type MsgBroker struct {
	mock.Mock
}

// PublishMsg provides a mock function with given fields: ctx, topicName, data
func (_m *MsgBroker) PublishMsg(ctx context.Context, topicName msgbroker.TopicName, data []byte) error {
	ret := _m.Called(ctx, topicName, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, msgbroker.TopicName, []byte) error); ok {
		r0 = rf(ctx, topicName, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterTopicHandler provides a mock function with given fields: topic, handler, opts
func (_m *MsgBroker) RegisterTopicHandler(topic msgbroker.TopicName, handler msgbroker.TopicHandler, opts ...msgbroker.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, topic, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(msgbroker.TopicName, msgbroker.TopicHandler, ...msgbroker.Option) error); ok {
		r0 = rf(topic, handler, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
