// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	datastore "github.com/ipfs/go-datastore"
	dsextensions "github.com/textileio/go-datastore-extensions"

	mock "github.com/stretchr/testify/mock"

	query "github.com/ipfs/go-datastore/query"
)

// TxnDatastore is an autogenerated mock type for the TxnDatastore type
type TxnDatastore struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *TxnDatastore) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: key
func (_m *TxnDatastore) Delete(key datastore.Key) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Key) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *TxnDatastore) Get(key datastore.Key) ([]byte, error) {
	ret := _m.Called(key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(datastore.Key) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Key) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSize provides a mock function with given fields: key
func (_m *TxnDatastore) GetSize(key datastore.Key) (int, error) {
	ret := _m.Called(key)

	var r0 int
	if rf, ok := ret.Get(0).(func(datastore.Key) int); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Key) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Has provides a mock function with given fields: key
func (_m *TxnDatastore) Has(key datastore.Key) (bool, error) {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(datastore.Key) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(datastore.Key) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransaction provides a mock function with given fields: readOnly
func (_m *TxnDatastore) NewTransaction(readOnly bool) (datastore.Txn, error) {
	ret := _m.Called(readOnly)

	var r0 datastore.Txn
	if rf, ok := ret.Get(0).(func(bool) datastore.Txn); ok {
		r0 = rf(readOnly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.Txn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(readOnly)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionExtended provides a mock function with given fields: readOnly
func (_m *TxnDatastore) NewTransactionExtended(readOnly bool) (dsextensions.TxnExt, error) {
	ret := _m.Called(readOnly)

	var r0 dsextensions.TxnExt
	if rf, ok := ret.Get(0).(func(bool) dsextensions.TxnExt); ok {
		r0 = rf(readOnly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dsextensions.TxnExt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(readOnly)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: key, value
func (_m *TxnDatastore) Put(key datastore.Key, value []byte) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Key, []byte) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: q
func (_m *TxnDatastore) Query(q query.Query) (query.Results, error) {
	ret := _m.Called(q)

	var r0 query.Results
	if rf, ok := ret.Get(0).(func(query.Query) query.Results); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(query.Results)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(query.Query) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryExtended provides a mock function with given fields: q
func (_m *TxnDatastore) QueryExtended(q dsextensions.QueryExt) (query.Results, error) {
	ret := _m.Called(q)

	var r0 query.Results
	if rf, ok := ret.Get(0).(func(dsextensions.QueryExt) query.Results); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(query.Results)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dsextensions.QueryExt) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sync provides a mock function with given fields: prefix
func (_m *TxnDatastore) Sync(prefix datastore.Key) error {
	ret := _m.Called(prefix)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Key) error); ok {
		r0 = rf(prefix)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
