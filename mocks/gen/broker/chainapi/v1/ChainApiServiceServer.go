// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	chainapi "github.com/textileio/broker-core/gen/broker/chainapi/v1"

	mock "github.com/stretchr/testify/mock"
)

// ChainApiServiceServer is an autogenerated mock type for the ChainApiServiceServer type
type ChainApiServiceServer struct {
	mock.Mock
}

// HasDeposit provides a mock function with given fields: _a0, _a1
func (_m *ChainApiServiceServer) HasDeposit(_a0 context.Context, _a1 *chainapi.HasDepositRequest) (*chainapi.HasDepositResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chainapi.HasDepositResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chainapi.HasDepositRequest) *chainapi.HasDepositResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chainapi.HasDepositResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chainapi.HasDepositRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayload provides a mock function with given fields: _a0, _a1
func (_m *ChainApiServiceServer) UpdatePayload(_a0 context.Context, _a1 *chainapi.UpdatePayloadRequest) (*chainapi.UpdatePayloadResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chainapi.UpdatePayloadResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chainapi.UpdatePayloadRequest) *chainapi.UpdatePayloadResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chainapi.UpdatePayloadResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chainapi.UpdatePayloadRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedChainApiServiceServer provides a mock function with given fields:
func (_m *ChainApiServiceServer) mustEmbedUnimplementedChainApiServiceServer() {
	_m.Called()
}
