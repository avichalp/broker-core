// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AuctionSource interface {
	IsAuctionSource()
}

type AuctionStatus string

const (
	AuctionStatusUnspecified AuctionStatus = "UNSPECIFIED"
	AuctionStatusQueued      AuctionStatus = "QUEUED"
	AuctionStatusStarted     AuctionStatus = "STARTED"
	AuctionStatusFinalized   AuctionStatus = "FINALIZED"
)

var AllAuctionStatus = []AuctionStatus{
	AuctionStatusUnspecified,
	AuctionStatusQueued,
	AuctionStatusStarted,
	AuctionStatusFinalized,
}

func (e AuctionStatus) IsValid() bool {
	switch e {
	case AuctionStatusUnspecified, AuctionStatusQueued, AuctionStatusStarted, AuctionStatusFinalized:
		return true
	}
	return false
}

func (e AuctionStatus) String() string {
	return string(e)
}

func (e *AuctionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuctionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuctionStatus", str)
	}
	return nil
}

func (e AuctionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
