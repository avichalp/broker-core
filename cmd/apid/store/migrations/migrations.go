// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xca\x4c\x29\xb6\xe6\x42\x12\x48\x2c\x4d\x2e\xc9\xcc\xcf\x83\x0b\x46\x06\xc0\xc5\xe2\x8b\x4b\x12\x4b\x4a\x8b\xad\xb9\x00\x01\x00\x00\xff\xff\x0f\x4e\x3e\xdf\x40\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 64, mode: os.FileMode(420), modTime: time.Unix(1628862435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xd1\x8e\xa2\x30\x18\x85\xef\x7d\x8a\xff\x0e\x4d\x7c\x83\xbd\xaa\x6e\x99\x90\x45\x30\x50\x93\x31\x9b\x4d\x53\xdb\x5f\xa7\xb1\xa1\x6c\x5b\x70\xb3\x4f\xbf\x01\x25\xcc\x30\xcc\x7a\xd7\xf0\x7f\x9c\xf6\x9c\xd3\x6e\x0b\x4a\x18\x05\x76\xdc\x53\x10\x8d\x0c\xda\x56\xdc\x07\x11\x1a\x0f\xa4\x04\x9a\x1d\x76\xb0\x8c\x9a\xca\xd7\x28\xf5\x59\xa3\x8a\xd6\x10\xfd\x6e\xb0\xe9\x56\x91\x0f\xc2\x85\x7e\x75\xd6\x95\x30\xfa\x2f\xaa\x68\xf5\x6d\xb1\x18\x44\xc9\x26\xa5\x90\xc4\x90\xe5\x0c\xe8\x6b\x52\xb2\x72\xd8\xc3\xc3\x72\x01\x00\xa0\x15\x30\xfa\xca\x60\x5f\x24\x3b\x52\x1c\xe1\x07\x3d\xae\xfb\xc1\x49\x04\xf9\xc6\x87\x71\x27\x90\x1d\xd2\xf4\x3e\x53\x28\x0c\x6f\xd1\xf5\x07\x82\x4d\x9e\xa7\x94\x64\x13\x06\xff\x48\xd3\x28\x54\xdc\x07\xeb\xc4\x05\x79\xed\x6c\xab\x15\x3a\xdf\x2b\xfe\xfc\x75\xc7\x1e\x56\x27\xce\x3f\x4a\x3d\x5c\x72\x11\x80\x25\x3b\x5a\x32\xb2\xdb\x4f\x90\xa6\x56\xe2\x09\x22\x8d\xf5\x13\xe2\xe1\xa6\x71\xa2\xdb\x1c\x36\xc9\x4b\x92\x4d\xbd\xa2\x73\xd6\x71\x29\x1a\x8f\x1f\xa3\x58\x3c\x09\xfa\xa4\xd5\x10\xf2\xe0\x6e\x3e\xcd\x69\x40\x5f\x60\x37\x61\x0c\x06\x2e\x94\x72\xdc\xeb\x0b\x6c\x8e\x8c\x92\x09\x73\xd2\xea\x6b\x01\xe1\xaf\xbc\x76\x5a\xe2\xbc\xd1\xa1\x4f\xfe\x84\xeb\xdb\xe0\x58\x5b\xf9\x36\x0f\x9c\x85\x0f\xdc\x61\x70\x1a\x5b\x61\x3e\x5d\x0f\xf8\x4e\x63\x72\x48\x19\xc4\x24\x2d\xe9\xfd\x17\x87\x12\x75\xfb\xff\xfe\x6e\xb6\x9a\x29\x4f\xc8\x6b\x65\x6f\x06\xd5\x65\xb6\xdb\xda\xd9\xda\x7a\x61\xb8\xd4\x8a\x2b\x34\xba\x45\xf7\x14\xec\xc3\xbb\x7f\xde\xe6\x59\xc9\x0a\xd2\x99\xac\xaf\x7c\xec\x91\x8f\x49\xbf\x7b\x39\xcb\x11\x58\x8f\x5d\xac\x3e\x49\x9d\xdf\x4b\x41\x9c\x17\x34\x79\xc9\x26\x02\x2b\x28\x68\x4c\x0b\x9a\x6d\xe9\xf8\x68\x97\x5a\xad\xba\x7b\xf7\x2f\x00\x00\xff\xff\x89\xd7\xf5\x1e\x35\x04\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1077, mode: os.FileMode(420), modTime: time.Unix(1628862435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
