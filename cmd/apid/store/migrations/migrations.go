// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xca\x4c\x29\xb6\xe6\x42\x12\x28\xcf\xcc\xcb\xcb\xcc\x4b\x8f\xc7\x90\x48\x4e\x2c\x8a\x2f\x2d\xca\x89\x2f\xce\x2f\x2d\x4a\x4e\xc5\x94\xcb\x2c\x48\x2b\xc6\x2a\x99\x58\x9a\x5c\x92\x99\x9f\x07\x17\x8c\x0c\x80\x8b\xc5\x17\x97\x24\x96\x94\x16\x5b\x73\x01\x02\x00\x00\xff\xff\x5e\xdd\xaf\x51\x92\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 146, mode: os.FileMode(420), modTime: time.Unix(1627085375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x51\x6f\xda\x30\x10\xc7\xdf\xf9\x14\xf7\x06\x95\xfa\x0d\xf6\x14\x98\xa9\xa2\x85\x50\x05\x33\x15\x4d\x93\x65\xec\x83\x9d\x70\x93\xcc\x76\xda\xb5\x9f\x7e\x72\xb2\xb4\x10\x92\xb2\x55\x53\xdf\xa2\xdc\xff\xef\xdc\xfd\xfe\x17\xcf\x32\x16\x71\x06\x7c\x73\xcb\x40\x56\xca\x53\x91\x0b\xe7\xa5\xaf\x1c\x44\x2b\x60\xe9\x7a\x01\x93\x71\x95\xbb\x12\x15\xed\x08\xf5\xf8\x1a\xc6\x3f\x2b\xac\xc2\xd3\xd8\x79\x69\x7d\xfd\xb4\xa3\x5c\x1a\x7a\x46\x3d\xbe\xfa\x34\x1a\xb5\x87\x46\xd3\x84\x41\x3c\x87\x74\xc9\x81\xdd\xc5\x2b\xbe\x6a\xbf\xe1\x60\x32\x02\x00\x20\x0d\x9c\xdd\x71\xb8\xcd\xe2\x45\x94\x6d\xe0\x0b\xdb\x5c\xd7\x05\xe7\x0b\x2b\xf7\x28\x34\x4a\x23\x5a\x55\x38\x27\x5d\x27\x49\x23\x29\xe5\x93\x29\xa4\x16\xaa\xbf\x5c\x3b\x1d\x3d\x23\x4c\xe3\x9b\x38\xed\x2d\xeb\xca\xca\xd0\xce\x1b\x12\x8b\xa5\x21\xd5\xa8\xe2\x94\xb3\x1b\x96\xf5\xc9\x1e\xd0\xd6\x7c\x60\xba\x5c\x26\x2c\x4a\x3b\x9a\x1d\x19\x81\x65\xa1\x7e\x84\x81\xb4\xa1\x7c\xa0\x2b\xfc\xa5\x4c\xa5\x51\x8b\x7b\xca\xd1\xba\x7a\xae\x6f\xdf\x5b\x24\x75\x2c\x9d\x94\x5a\x3f\x7c\x66\xf3\x68\x9d\x70\x38\x4d\xab\x75\x86\x9c\x84\xf4\xc0\xe3\x05\x5b\xf1\x68\x71\x7b\x6e\x9c\xad\xb3\x8c\xa5\x5c\xbc\x48\x1a\x73\x55\x6a\xf9\x6e\xf3\x0b\xe0\x80\x2e\xfb\x1a\x25\x9d\x79\xa5\xf7\x78\x5f\x7a\x37\x80\x16\xad\x2d\xac\x50\xb2\x72\x58\xa3\x68\xde\x6e\x6d\x71\x40\x2b\xa4\xb1\x28\xf5\x93\xc8\x0b\x5f\x0f\x2b\x94\x29\x5c\x68\xb4\x01\x74\x96\xc4\xe8\xc2\x6a\x6e\x49\x5f\x5c\xcb\x16\x7e\xff\xca\xd5\xa1\x09\xa9\xb5\xed\xab\x3e\x4a\x63\xd0\xd7\x65\xe1\x68\x0f\xd3\x0d\x67\x51\x47\xb3\x25\xad\xd1\x0e\x1c\x2f\xdd\x41\x94\x96\xd4\xc0\xee\xb4\x2b\x28\xba\xba\xa3\x25\x68\x96\xb0\xdf\xbf\x93\xce\x0b\x8b\xde\x12\x3e\x48\x73\x86\xef\x25\xea\x79\x94\xac\x58\x63\xb1\xa8\x90\x1e\x86\x96\xa3\xd1\xcc\x96\xe9\x8a\x67\x51\xf8\xde\xee\x20\x8e\x00\xce\x97\x19\x8b\x6f\xd2\x00\x77\xf2\xfa\xfa\x0a\x32\x36\x67\x19\x4b\x67\xec\xf5\xb6\x98\x90\xbe\xba\x14\xdf\x23\xe5\x39\xe5\x7b\x71\x14\xe3\x96\xb4\x78\x67\x94\x6f\x07\xa1\x0e\x79\xf1\x68\x50\xef\x07\x7f\xf8\xd2\x16\x65\xe1\xa4\x19\xba\x9d\x8e\xeb\xe2\x2f\xce\x3b\xa5\xf8\x67\xb0\x63\x82\xcd\xab\x13\x7a\x81\x44\x20\xf7\xb1\x39\x28\x69\x45\x65\x8d\x70\x45\x65\x15\xb6\x51\x74\x69\x9f\xc5\x51\x5b\xbc\xa5\x7c\xdf\x87\xeb\x23\x9b\xa7\x72\xe7\xfe\xb5\xfb\x81\x94\xef\x2b\xe3\x29\xfc\xf0\xa7\x37\xf9\xff\x9c\xe6\x77\x00\x00\x00\xff\xff\xc1\xf5\x40\xa1\xc1\x07\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1985, mode: os.FileMode(420), modTime: time.Unix(1627085375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
