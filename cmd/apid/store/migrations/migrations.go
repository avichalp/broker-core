// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/.001_init.up.sql.swp
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initUpSqlSwp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x3d\x6f\x23\x45\x18\xc7\xff\x39\x89\x02\xbf\xac\x81\xab\x10\xcd\x00\x85\x13\xc9\xb1\x93\xd0\x9c\x74\x0d\x6b\xb3\x3e\x19\xfc\x12\xd9\x1b\x74\x11\x82\xd5\x64\x66\xec\x1b\x79\xe3\xd9\x9b\x99\x75\xee\x78\x95\x90\x68\x11\x35\x88\x16\x0a\xe8\xe9\xae\xa3\x01\x89\x86\x06\x74\x05\xe2\x3b\xd0\x83\xfc\x96\x38\x8e\x73\x07\xd2\xc1\x89\xd3\xfc\x9a\xf5\xf3\xcc\x33\xcf\x3c\x6f\x63\xc9\xf2\x1e\xed\xbc\xd9\x68\x91\x6b\xe5\x3d\x00\x78\x06\xf8\xe3\xd7\xab\xf4\xf9\xdd\x5f\x36\x3e\xfd\x19\x18\xd2\xbb\xf8\x3b\x1c\x53\x56\x66\x6a\x20\x98\x2a\xc7\x8a\xd1\xf8\x32\xbb\x0f\x87\xf4\x6e\x85\x29\x2e\x2a\x56\xdc\xb1\x32\x16\x52\x55\x8e\xb4\x1a\x0a\xbd\xcd\x94\x16\x15\x76\xcc\x2b\x34\x91\xbc\x62\xec\x44\x3c\x96\x03\x4d\xad\x54\x23\x53\xd9\xd9\xd9\x8d\xe4\x48\xda\x72\x9a\x94\xcd\xed\x4b\x0f\x70\x38\x1c\xeb\x49\x6d\x7f\xfb\x5a\x1e\xaf\xec\xed\xee\x4c\xc4\x97\x5f\x7a\x91\x5c\x7d\xee\xe0\x71\x47\xe5\x70\x38\x1c\x0e\x87\xc3\xe1\x70\x38\xfe\x43\x6c\xb2\x81\x8f\x00\x5c\x99\xcb\xdb\xf3\xe7\xc6\xca\xd3\xe1\x70\x38\x1c\x0e\x87\xc3\xe1\x70\x38\x1c\x0e\xc7\xff\x17\xca\x81\xe4\x69\xe0\xd5\xcc\xec\xff\xff\xc5\xef\xff\x6f\x0b\xc0\x37\x05\xe0\x93\x02\x10\x17\x80\xfd\x02\x50\x2a\x00\x4f\x15\x80\xdf\x3d\xe0\x9e\x07\x7c\xe1\x01\x1f\x7b\x00\xf7\x80\xba\x07\xd4\x3c\xa0\xea\x01\xc4\x03\xae\x78\xc0\xfd\x3c\xf0\x5d\x1e\xf8\x3c\x0f\xbc\x97\x07\x7a\x79\x60\x2f\x0f\xfc\x99\x03\xee\xe7\x80\xef\x73\xc0\x57\x39\xe0\x83\x1c\xd0\xcf\x01\x2f\xe4\x80\x9f\xb2\xc0\x8f\x59\xe0\x87\x2c\xf0\x65\x16\x78\x3f\x0b\xbc\x93\x05\x9e\xcd\x02\x5e\x16\xc8\x67\x81\xdf\x32\xc0\xbd\x0c\xf0\x75\x06\xf8\x2c\x03\xd4\x32\xb3\xf8\x5f\xcf\x3c\xe6\x62\x3a\x1c\x0e\x87\xc3\xe1\x70\x3c\x89\x6c\x5d\x07\x21\x84\xd4\x3a\xed\x5e\xd8\xf5\x1b\x2b\x62\x3b\x24\xfd\x61\x44\x53\x66\xa5\x1a\x45\x92\x93\x7a\xa7\x1b\x34\x6e\xb4\xc9\x1b\xc1\xe1\xe6\x99\x7a\x8b\x74\x83\x7a\xd0\x0d\xda\xb5\xa0\x47\xe6\x6a\xb3\x29\xf9\xd6\xd4\xd9\x71\x1a\x5b\x49\x39\xd7\x86\x84\xc1\xcd\xf0\xad\xb7\x4b\x53\x35\x93\x7c\x2a\x93\x76\x27\x24\xed\x83\x66\x73\xa6\x5e\x3a\x6c\xba\xba\xdf\x6d\xb4\xfc\xee\xe1\xe4\xc4\x12\x6a\xdd\xc0\x0f\x03\x12\xfa\xd5\x66\x40\x1a\xf5\xe9\xd6\xe0\x66\xa3\x17\xf6\x08\xa3\x3a\x92\x49\xdf\x44\x46\xa5\x9a\x09\x43\x36\x2f\x24\xf7\x48\xb2\x49\x75\x1c\x19\xab\xe5\x68\xf0\xa8\xa3\x9f\x7a\xfe\x77\x83\x5f\x72\x96\x2c\x3b\x8b\x8e\x24\xe7\x42\x4f\xdc\x2e\x45\xbc\xe4\xb6\x44\x4e\x2d\xb6\x66\x99\x26\x5a\x25\xca\xd0\x38\x5a\xf4\xf1\xa2\x3a\xe2\x22\x96\x63\xa1\x05\x8f\xa8\x25\x61\xa3\x15\xf4\x42\xbf\xb5\x3f\xaf\x14\x1b\x8e\xd4\x49\x2c\xf8\x60\xed\xf2\x89\x1a\xad\xd1\x6a\xc1\x84\x1c\xaf\x6c\x58\x69\x41\x9f\x1a\x1b\x69\x61\xb5\x14\x63\x1a\x93\x6a\xa7\xd3\x0c\xfc\xf6\xa9\x11\x79\x2d\xa8\xfb\x07\xcd\x90\xd4\xfd\x66\x2f\x98\x6d\x31\x96\x6a\x1b\x89\x44\xb1\x5b\xa4\xda\xb8\x31\x29\xcf\x79\x9f\x63\xa1\x65\x5f\x4e\xce\x35\xc3\x28\xd1\x92\x89\xf5\x76\x0f\x59\x3e\xab\xf2\x9a\xd1\x39\xa1\x71\x2c\x6c\x34\xb9\x28\x91\x91\x03\x52\x3d\x0c\x03\x7f\xc5\xc6\x58\xa5\xe9\x40\x44\x89\x56\x63\x79\xb9\xab\xd5\x29\x3c\x5b\x7d\xc0\x08\x1e\x49\xbe\x3c\x77\x42\x6b\xa5\x23\x46\x53\x23\xce\x3b\x99\xae\xf2\x74\xf6\x2e\xf7\xfa\x3c\x59\xac\xcc\xda\xae\xa6\x09\xa7\xf6\xc1\xed\x9b\xf6\xe2\xa1\x26\x36\x35\xa7\x59\xce\xc5\xf3\x36\xe2\x0e\x8b\x53\x2e\x78\xb4\x5a\xb2\xf3\x5f\x42\x5c\xd0\x38\x5a\x74\xf7\xc2\xac\xcc\xbb\x46\x2d\xbb\x75\x49\xa5\xff\xe9\x3d\x5f\xdc\xc8\x49\xa1\x17\x66\x87\xfb\xc1\x6a\x2e\x7e\x8f\x04\xed\x83\x16\xd9\x2c\xa6\x23\x93\x08\x36\x0d\xaf\x58\x22\xc5\xdb\xa9\x48\x27\x9f\x8a\xf3\x32\x15\x4b\xc5\xbe\x1c\xd1\x58\xbe\x2b\x78\x71\xeb\x3a\xfe\x0a\x00\x00\xff\xff\x8c\x24\x05\x02\x00\x30\x00\x00")

func _001_initUpSqlSwpBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSqlSwp,
		".001_init.up.sql.swp",
	)
}

func _001_initUpSqlSwp() (*asset, error) {
	bytes, err := _001_initUpSqlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".001_init.up.sql.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1628690933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xca\x4c\x29\xb6\xe6\x42\x12\x28\xcf\xcc\xcb\xcb\xcc\x4b\x8f\xc7\x90\x48\x4e\x2c\x8a\x2f\x2d\xca\x89\x2f\xce\x2f\x2d\x4a\x4e\xc5\x94\xcb\x2c\x48\x2b\xc6\x2a\x99\x58\x9a\x5c\x92\x99\x9f\x07\x17\x8c\x0c\x80\x8b\xc5\x17\x97\x24\x96\x94\x16\x5b\x73\x01\x02\x00\x00\xff\xff\x5e\xdd\xaf\x51\x92\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 146, mode: os.FileMode(420), modTime: time.Unix(1628614312, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\xd1\x8e\xda\x30\x10\x7c\xe7\x2b\xf6\x0d\x90\xee\x0f\xfa\x14\xa8\x39\x45\x0d\x01\x25\x46\x3a\x54\x55\x96\xb1\x17\xce\xc2\x8d\xd3\xb5\x0d\x55\xbf\xbe\x22\x10\x71\x84\x50\x54\xa9\xea\x9b\x95\x1d\x8f\x77\x66\x76\x33\x2d\x58\xc2\x19\xf0\xf5\x92\x81\x8c\x2a\x18\x57\x09\x1f\x64\x88\x1e\x92\x12\x58\xbe\x9a\xc3\x68\x18\x2b\x5f\xa3\x32\x5b\x83\x7a\xf8\x02\xc3\x1f\x11\xe3\xe9\x34\xf4\x41\x52\x68\x4e\x5b\x53\x49\x6b\x7e\xa1\x1e\x8e\x3f\x0d\x06\x2d\x69\x32\xc9\x18\xa4\x33\xc8\x17\x1c\xd8\x5b\x5a\xf2\xb2\x7d\xc3\xc3\x68\x00\x00\x60\x34\x70\xf6\xc6\x61\x59\xa4\xf3\xa4\x58\xc3\x17\xb6\x7e\x69\x0a\x1b\x19\xd4\xbb\x68\xcb\x27\x82\x7c\x95\x65\xe7\x9a\x46\x69\xc5\x01\xa9\x69\x08\x26\x8b\x45\xc6\x92\xbc\x83\xc1\x9f\xca\x46\x8d\x5a\xf8\xe0\x48\xee\x50\xd4\xe4\x0e\x46\x23\xf9\x86\xf1\xeb\xb7\x33\xec\x22\xb5\xa3\xfc\x96\xea\xa2\x52\xc8\x00\x3c\x9d\xb3\x92\x27\xf3\x65\x07\x12\x6b\x2d\x9f\x40\x94\x75\xbe\x83\xb8\xa8\x89\x24\x4f\x8f\xc3\x24\x7d\x4d\xf3\xae\x56\x24\x72\x24\x94\x8c\x1e\x6f\xad\x18\x3c\x31\x7a\x63\x74\x6b\x72\xab\xae\xdf\xcd\xae\x41\x0f\x60\x47\x69\x2d\x06\x21\xb5\x26\xe1\xcd\x0e\x26\x6b\xce\x92\x0e\x66\x63\xf4\x63\x02\xe9\xf7\xa2\x26\xa3\xb0\x5f\x68\x9b\xa7\x78\x82\x6b\xd2\x10\x58\x3b\xf5\xde\x0f\xd8\x4a\x1f\x04\x61\x20\x83\x07\x69\xef\xc6\x03\x3e\xb3\x59\xb2\xca\x38\xcc\x92\xac\x64\xe7\x2b\x84\x0a\xcd\xe1\xcf\xf9\x1d\x5d\xd5\x13\x9e\x54\xfb\xca\x1d\x2d\xea\x5d\x6f\xb6\x35\xb9\xda\x79\x69\x85\x32\x5a\x68\xb4\xe6\x80\xf4\x14\xd8\x98\x77\xfe\x3c\x5d\xe4\x25\x2f\x92\x93\xc8\x7a\x2f\xae\x39\x8a\xab\xd3\x1f\x36\x67\x74\x05\xbc\x5c\xb3\x18\xdf\x51\x6d\x3f\x52\xc1\x6c\x51\xb0\xf4\x35\xef\x10\x8c\xa1\x60\x33\x56\xb0\x7c\xca\xae\x4b\x3b\x32\x7a\xfc\x6c\xee\x94\x24\x11\xc9\x0a\xef\x22\x29\x7c\x34\x82\x77\xfb\xde\x5c\x09\x64\xaa\x5d\xdf\xec\xfc\xcf\xe6\x4d\xbd\xf5\x7f\xdb\xbd\xea\x1f\xf9\xef\xd1\x06\x73\xda\x98\xdb\x9f\xce\xbf\x54\xf3\x3b\x00\x00\xff\xff\x80\x2b\x56\x8d\xc0\x05\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1472, mode: os.FileMode(420), modTime: time.Unix(1628690932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".001_init.up.sql.swp": _001_initUpSqlSwp,
	"001_init.down.sql":    _001_initDownSql,
	"001_init.up.sql":      _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".001_init.up.sql.swp": &bintree{_001_initUpSqlSwp, map[string]*bintree{}},
	"001_init.down.sql":    &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":      &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
