// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xca\x4c\x29\xb6\xe6\x42\x12\x28\xcf\xcc\xcb\xcb\xcc\x4b\x8f\xc7\x90\x48\x4e\x2c\x8a\x2f\x2d\xca\x89\x2f\xce\x2f\x2d\x4a\x4e\xc5\x94\xcb\x2c\x48\x2b\xc6\x2a\x99\x58\x9a\x5c\x92\x99\x9f\x07\x17\x8c\x0c\x80\x8b\xc5\x17\x97\x24\x96\x94\x16\x5b\x73\x01\x02\x00\x00\xff\xff\x5e\xdd\xaf\x51\x92\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 146, mode: os.FileMode(420), modTime: time.Unix(1628614312, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x51\x8f\xda\x3c\x10\x7c\xe7\x57\xec\x1b\x20\xdd\x3f\xf8\x9e\x02\x9f\x39\x45\x0d\x01\x25\x46\x3a\x54\x55\x96\xb1\x17\xce\xc2\x17\xa7\x6b\x1b\xaa\xfe\xfa\x8a\x40\xc4\x11\x42\x51\xa5\xaa\x6f\x56\x76\x3c\xde\xd9\x99\xcd\xb4\x60\x09\x67\xc0\xd7\x4b\x06\x32\xaa\x60\x5c\x25\x7c\x90\x21\x7a\x48\x4a\x60\xf9\x6a\x0e\xa3\x61\xac\x7c\x8d\xca\x6c\x0d\xea\xe1\x0b\x0c\xbf\x47\x8c\xa7\xd3\xd0\x07\x49\xa1\x39\x6d\x4d\x25\xad\xf9\x89\x7a\x38\xfe\x6f\x30\x68\x49\x93\x49\xc6\x20\x9d\x41\xbe\xe0\xc0\xde\xd2\x92\x97\xed\x1b\x1e\x46\x03\x00\x00\xa3\x81\xb3\x37\x0e\xcb\x22\x9d\x27\xc5\x1a\xbe\xb0\xf5\x4b\x53\xd8\xc8\xa0\xde\x45\x5b\x3e\x11\xe4\xab\x2c\x3b\xd7\x34\x4a\x2b\x0e\x48\x4d\x43\x30\x59\x2c\x32\x96\xe4\x1d\x0c\xfe\x50\x36\x6a\xd4\xe2\xc3\x54\x48\xbe\xa1\xf9\xfa\xed\x5c\xbb\xe8\xeb\xc8\xbd\xbd\x7f\x91\x26\x64\x00\x9e\xce\x59\xc9\x93\xf9\xb2\x03\x89\xb5\x96\x4f\x20\xca\x3a\xdf\x41\x5c\x24\x44\x92\xa7\xc7\x61\x92\xbe\xa6\x79\x57\x20\x12\x39\x12\x4a\x46\x8f\xb7\xfa\x07\x4f\xa6\xbb\x31\xba\x9d\x6c\xab\xae\x7f\x84\x3e\x38\x92\x3b\x14\x35\xb9\x83\xd1\x48\x0f\x60\x47\x69\x2d\x06\x21\xb5\x26\xe1\xcd\x0e\x26\x6b\xce\x92\x0e\x66\x63\xf4\x63\x02\xe9\xf7\xa2\x26\xa3\xb0\x5f\x68\x6b\xa2\x78\x82\x6b\xdc\x10\x58\x3b\xf5\xde\x0f\xd8\x4a\x1f\x04\x61\x20\x83\x07\x69\xef\x32\x01\xff\xb3\x59\xb2\xca\x38\xcc\x92\xac\x64\xe7\x2b\x84\x0a\xcd\xe1\xf7\xfe\x1d\x5d\xd5\x63\x9e\x54\xfb\xca\x1d\x2d\xea\x5d\xaf\xb7\x35\xb9\xda\x79\x69\x85\x32\x5a\x68\xb4\xe6\x80\xf4\x14\xd8\x0c\xef\xfc\x79\xba\xc8\x4b\x5e\x24\x27\x91\xf5\x5e\x5c\x7d\x14\xd7\x49\x7f\x5a\x97\xd1\x15\xf0\x72\xf5\x62\x7c\x47\xb5\xfd\x4c\x05\xb3\x45\xc1\xd2\xd7\xbc\x43\x30\x86\x82\xcd\x58\xc1\xf2\x29\xbb\x6e\xea\xc8\xe8\xf1\xb3\xdc\x29\x49\x22\x92\x15\xde\x45\x52\xf8\x28\x82\x77\x4b\xde\x5c\x09\x64\xaa\x5d\x5f\x76\xfe\x65\xf3\xa6\xde\xfa\x3f\xed\x5e\xf5\x47\xfe\x23\xda\x60\x4e\x1b\x73\xfb\xd3\xf9\x9b\x6a\x7e\x05\x00\x00\xff\xff\x5a\x3a\xa3\x91\xb5\x05\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1461, mode: os.FileMode(420), modTime: time.Unix(1628634176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
