// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xca\x4c\x29\xb6\xe6\x42\x12\x28\xcf\xcc\xcb\xcb\xcc\x4b\x8f\xc7\x90\x48\x4e\x2c\x8a\x2f\x2d\xca\x89\x2f\xce\x2f\x2d\x4a\x4e\xc5\x94\xcb\x2c\x48\x2b\xc6\x2a\x99\x58\x9a\x5c\x92\x99\x9f\x07\x17\x8c\x0c\x80\x8b\xc5\x17\x97\x24\x96\x94\x16\x5b\x73\x01\x02\x00\x00\xff\xff\x5e\xdd\xaf\x51\x92\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 146, mode: os.FileMode(420), modTime: time.Unix(1628185811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\xdd\x6e\x9b\x40\x10\x85\xef\xfd\x14\x7b\x67\x47\xca\x1b\xf4\x0a\xbb\xeb\x08\x15\xe3\x08\xaf\xab\x58\x55\x35\x5a\xef\x8e\x9d\x91\x37\x40\xf7\x27\x69\xf2\xf4\x15\x10\x12\x1b\x43\xd2\x46\x55\xee\x10\x67\x66\x99\xf9\xce\x61\x67\x19\x8f\x04\x67\x62\x73\xcd\x99\x0c\xca\x53\x91\x83\xf3\xd2\x07\xc7\xa2\x15\xe3\xe9\x7a\xc1\x26\xe3\x90\xbb\x12\x15\xed\x08\xf5\xf8\x92\x8d\x7f\x05\x0c\xd5\xd3\xd8\x79\x69\x7d\xfd\xb4\xa3\x5c\x1a\x7a\x42\x3d\xbe\xf8\x32\x1a\xb5\x87\x46\xd3\x84\xb3\x78\xce\xd2\xa5\x60\xfc\x26\x5e\x89\x55\xfb\x0d\xc7\x26\x23\xc6\x18\x23\xcd\x04\xbf\x11\xec\x3a\x8b\x17\x51\xb6\x61\xdf\xf8\xe6\xb2\x16\xb6\xd2\xab\x5b\x68\xe5\xea\x80\x74\x9d\x24\x8d\x56\xca\x47\x53\x48\x0d\xaa\x5f\xd6\x28\x0d\x38\x7a\x42\x36\x8d\xaf\xe2\xb4\x57\xd6\xc1\xca\x6a\x8e\x37\x4a\x2c\x96\x86\x54\x53\x15\xa7\x82\x5f\xf1\xac\xaf\xec\x1e\x6d\x0d\x86\x4d\x97\xcb\x84\x47\x69\xa7\x66\x47\x06\xb0\x2c\xd4\x2d\x68\x94\xda\x50\x3e\x30\x15\xfe\x56\x26\x68\xd4\x70\x47\x39\x5a\x57\xef\xf5\xe3\x67\xa3\x3d\xfb\xd1\xb1\xa7\xed\x67\x5f\xf9\x3c\x5a\x27\x82\x9d\xda\xd4\x76\x56\x06\x81\xf4\x4c\xc4\x0b\xbe\x12\xd1\xe2\xfa\xbc\x71\xb6\xce\x32\x9e\x0a\x78\x29\x69\x9a\x43\xa9\xe5\x87\x9b\x5f\x00\x57\xe8\xb2\xef\x51\xd2\xd9\x57\x7a\x8f\x77\xa5\x77\x03\x68\xd1\xda\xc2\x82\x92\xc1\x61\x8d\xe2\x39\x14\xb6\x38\xa0\x05\x69\x2c\x4a\xfd\x08\x79\xe1\xeb\x65\x41\x99\xc2\x55\x83\x36\x80\xce\x9c\x18\xbd\x93\xc9\x2d\xe9\x77\xf3\xd8\xc2\xef\x8f\x5c\x6d\x1a\x48\xad\x6d\x9f\xfa\x20\x8d\x41\x5f\xcb\xe0\x68\xcf\xa6\x1b\xc1\xa3\x4e\xcd\x96\xb4\x46\x3b\x70\xbc\x74\x07\x28\x2d\xa9\x81\xec\xb4\x11\x84\x6e\xdd\x51\x08\x9a\x10\xf6\xf7\xef\xa4\xf3\x60\xd1\x5b\xc2\x7b\x69\xce\xf0\xbd\x58\x3d\x8f\x92\x15\x6f\x5a\x2c\x2a\xa4\xfb\xa1\x70\x34\x35\xb3\x65\xba\x12\x59\x54\x7d\x6f\x77\x80\x23\x80\xf3\x65\xc6\xe3\xab\xb4\x82\x3b\x79\x7d\x7d\xc1\x32\x3e\xe7\x19\x4f\x67\xfc\xf5\x9a\x98\x90\xbe\x78\xcf\xbe\x07\xca\x73\xca\xf7\x70\x64\xe3\x96\x34\x7c\xd0\xca\xb7\x8d\x50\x87\xbc\x78\x30\xa8\xf7\x83\x3f\x7c\x69\x8b\xb2\x70\xd2\x0c\xdd\x4e\xc7\x3a\xfc\xc5\x79\xa7\x14\x9f\x17\x3b\x26\xd8\xbc\x3a\xa1\x57\x91\xa8\xc8\x7d\xae\x0f\x4a\x5a\x08\xd6\x80\x2b\x82\x55\xd8\x5a\xd1\xa5\x7d\x66\x47\xdd\xe2\x2d\xe5\xfb\x3e\x5c\x9f\x39\x3c\x95\x3b\xf7\xaf\xd3\x0f\xb8\x7c\x17\x8c\xa7\xea\x87\x3f\xbd\xc9\xff\xe7\x36\x7f\x02\x00\x00\xff\xff\x6a\x9b\x60\x3a\xba\x07\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1978, mode: os.FileMode(420), modTime: time.Unix(1628185161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
