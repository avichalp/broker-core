// Code generated by sqlc. DO NOT EDIT.
// source: bids.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const acknowledgedBid = `-- name: AcknowledgedBid :exec
UPDATE bids SET acknowledged_at = $3
WHERE auction_id = $1 and bidder_id = $2
`

type AcknowledgedBidParams struct {
	AuctionID      string       `json:"auctionID"`
	BidderID       string       `json:"bidderID"`
	AcknowledgedAt sql.NullTime `json:"acknowledgedAt"`
}

func (q *Queries) AcknowledgedBid(ctx context.Context, arg AcknowledgedBidParams) error {
	_, err := q.exec(ctx, q.acknowledgedBidStmt, acknowledgedBid, arg.AuctionID, arg.BidderID, arg.AcknowledgedAt)
	return err
}

const createOrUpdateBid = `-- name: CreateOrUpdateBid :exec
INSERT INTO bids (
    auction_id,
    storage_provider_id,
    bidder_id,
    ask_price,
    verified_ask_price,
    start_epoch,
    fast_retrieval,
    received_at
    ) VALUES (
      $1,
      $2,
      $3,
      $4,
      $5,
      $6,
      $7,
      $8)
  ON CONFLICT (auction_id, bidder_id) DO UPDATE SET
    storage_provider_id = $2,
    ask_price = $4,
    verified_ask_price = $5,
    start_epoch = $6,
    fast_retrieval = $7,
    received_at = $8
`

type CreateOrUpdateBidParams struct {
	AuctionID         string    `json:"auctionID"`
	StorageProviderID string    `json:"storageProviderID"`
	BidderID          string    `json:"bidderID"`
	AskPrice          int64     `json:"askPrice"`
	VerifiedAskPrice  int64     `json:"verifiedAskPrice"`
	StartEpoch        int64     `json:"startEpoch"`
	FastRetrieval     bool      `json:"fastRetrieval"`
	ReceivedAt        time.Time `json:"receivedAt"`
}

func (q *Queries) CreateOrUpdateBid(ctx context.Context, arg CreateOrUpdateBidParams) error {
	_, err := q.exec(ctx, q.createOrUpdateBidStmt, createOrUpdateBid,
		arg.AuctionID,
		arg.StorageProviderID,
		arg.BidderID,
		arg.AskPrice,
		arg.VerifiedAskPrice,
		arg.StartEpoch,
		arg.FastRetrieval,
		arg.ReceivedAt,
	)
	return err
}

const getBid = `-- name: GetBid :one
SELECT auction_id, storage_provider_id, bidder_id, ask_price, verified_ask_price, start_epoch, fast_retrieval, received_at, won_at, acknowledged_at, proposal_cid_delivered_at, proposal_cid FROM bids WHERE auction_id = $1 and bidder_id = $2
`

type GetBidParams struct {
	AuctionID string `json:"auctionID"`
	BidderID  string `json:"bidderID"`
}

func (q *Queries) GetBid(ctx context.Context, arg GetBidParams) (Bid, error) {
	row := q.queryRow(ctx, q.getBidStmt, getBid, arg.AuctionID, arg.BidderID)
	var i Bid
	err := row.Scan(
		&i.AuctionID,
		&i.StorageProviderID,
		&i.BidderID,
		&i.AskPrice,
		&i.VerifiedAskPrice,
		&i.StartEpoch,
		&i.FastRetrieval,
		&i.ReceivedAt,
		&i.WonAt,
		&i.AcknowledgedAt,
		&i.ProposalCidDeliveredAt,
		&i.ProposalCid,
	)
	return i, err
}

const proposalDelivered = `-- name: ProposalDelivered :exec
UPDATE bids SET proposal_cid = $3, proposal_cid_delivered_at = $4
WHERE auction_id = $1 and bidder_id = $2
`

type ProposalDeliveredParams struct {
	AuctionID              string         `json:"auctionID"`
	BidderID               string         `json:"bidderID"`
	ProposalCid            sql.NullString `json:"proposalCid"`
	ProposalCidDeliveredAt sql.NullTime   `json:"proposalCidDeliveredAt"`
}

func (q *Queries) ProposalDelivered(ctx context.Context, arg ProposalDeliveredParams) error {
	_, err := q.exec(ctx, q.proposalDeliveredStmt, proposalDelivered,
		arg.AuctionID,
		arg.BidderID,
		arg.ProposalCid,
		arg.ProposalCidDeliveredAt,
	)
	return err
}

const wonBid = `-- name: WonBid :exec
UPDATE bids SET won_at = $3
WHERE auction_id = $1 and bidder_id = $2
`

type WonBidParams struct {
	AuctionID string       `json:"auctionID"`
	BidderID  string       `json:"bidderID"`
	WonAt     sql.NullTime `json:"wonAt"`
}

func (q *Queries) WonBid(ctx context.Context, arg WonBidParams) error {
	_, err := q.exec(ctx, q.wonBidStmt, wonBid, arg.AuctionID, arg.BidderID, arg.WonAt)
	return err
}
