// Code generated by sqlc. DO NOT EDIT.
// source: auctions.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const closeAuction = `-- name: CloseAuction :exec
UPDATE auctions set status = $2, closed_at = $3
WHERE id = $1
`

type CloseAuctionParams struct {
	ID       string        `json:"id"`
	Status   AuctionStatus `json:"status"`
	ClosedAt sql.NullTime  `json:"closedAt"`
}

func (q *Queries) CloseAuction(ctx context.Context, arg CloseAuctionParams) error {
	_, err := q.exec(ctx, q.closeAuctionStmt, closeAuction, arg.ID, arg.Status, arg.ClosedAt)
	return err
}

const createOrUpdateAuction = `-- name: CreateOrUpdateAuction :exec
INSERT INTO auctions (
    id,
    batch_id,
    deal_verified,
    excluded_miners,
    status,
    started_at,
    updated_at,
    duration,
    error_cause
    ) VALUES (
      $1,
      $2,
      $3,
      $4,
      $5,
      $6,
      $7,
      $8,
      $9)
  ON CONFLICT (id) DO UPDATE SET
  batch_id = $2,
  deal_verified = $3,
  excluded_miners = $4,
  status = $5,
  started_at = $6,
  updated_at = $7,
  duration = $8,
  error_cause = $9
`

type CreateOrUpdateAuctionParams struct {
	ID             string        `json:"id"`
	BatchID        string        `json:"batchID"`
	DealVerified   bool          `json:"dealVerified"`
	ExcludedMiners []string      `json:"excludedMiners"`
	Status         AuctionStatus `json:"status"`
	StartedAt      time.Time     `json:"startedAt"`
	UpdatedAt      time.Time     `json:"updatedAt"`
	Duration       int64         `json:"duration"`
	ErrorCause     string        `json:"errorCause"`
}

func (q *Queries) CreateOrUpdateAuction(ctx context.Context, arg CreateOrUpdateAuctionParams) error {
	_, err := q.exec(ctx, q.createOrUpdateAuctionStmt, createOrUpdateAuction,
		arg.ID,
		arg.BatchID,
		arg.DealVerified,
		pq.Array(arg.ExcludedMiners),
		arg.Status,
		arg.StartedAt,
		arg.UpdatedAt,
		arg.Duration,
		arg.ErrorCause,
	)
	return err
}

const getAuction = `-- name: GetAuction :one
SELECT id, batch_id, deal_verified, excluded_miners, status, started_at, updated_at, closed_at, duration, error_cause FROM auctions WHERE id = $1
`

func (q *Queries) GetAuction(ctx context.Context, id string) (Auction, error) {
	row := q.queryRow(ctx, q.getAuctionStmt, getAuction, id)
	var i Auction
	err := row.Scan(
		&i.ID,
		&i.BatchID,
		&i.DealVerified,
		pq.Array(&i.ExcludedMiners),
		&i.Status,
		&i.StartedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
		&i.Duration,
		&i.ErrorCause,
	)
	return i, err
}
