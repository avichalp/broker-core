// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"database/sql"
	"fmt"
	"time"
)

type AuctionStatus string

const (
	AuctionStatusUnspecified AuctionStatus = "unspecified"
	AuctionStatusQueued      AuctionStatus = "queued"
	AuctionStatusStarted     AuctionStatus = "started"
	AuctionStatusFinalized   AuctionStatus = "finalized"
)

func (e *AuctionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuctionStatus(s)
	case string:
		*e = AuctionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AuctionStatus: %T", src)
	}
	return nil
}

type Auction struct {
	ID                       string        `json:"id"`
	BatchID                  string        `json:"batchID"`
	DealVerified             bool          `json:"dealVerified"`
	ExcludedStorageProviders []string      `json:"excludedStorageProviders"`
	Status                   AuctionStatus `json:"status"`
	StartedAt                time.Time     `json:"startedAt"`
	UpdatedAt                time.Time     `json:"updatedAt"`
	ClosedAt                 sql.NullTime  `json:"closedAt"`
	Duration                 int64         `json:"duration"`
	ErrorCause               string        `json:"errorCause"`
}

type Bid struct {
	AuctionID              string         `json:"auctionID"`
	StorageProviderID      string         `json:"storageProviderID"`
	BidderID               string         `json:"bidderID"`
	AskPrice               int64          `json:"askPrice"`
	VerifiedAskPrice       int64          `json:"verifiedAskPrice"`
	StartEpoch             int64          `json:"startEpoch"`
	FastRetrieval          bool           `json:"fastRetrieval"`
	ReceivedAt             time.Time      `json:"receivedAt"`
	WonAt                  sql.NullTime   `json:"wonAt"`
	AcknowledgedAt         sql.NullTime   `json:"acknowledgedAt"`
	ProposalCidDeliveredAt sql.NullTime   `json:"proposalCidDeliveredAt"`
	ProposalCid            sql.NullString `json:"proposalCid"`
}
