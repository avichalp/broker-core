// Code generated by sqlc. DO NOT EDIT.
// source: storage_provider.sql

package db

import (
	"context"
	"database/sql"
)

const createOrUpdateStorageProvider = `-- name: CreateOrUpdateStorageProvider :exec
INSERT INTO storage_providers (
    id,
    bidbot_version,
    deal_start_window,
    cid_gravity_configured,
    cid_gravity_strict
    ) VALUES (
      $1,
      $2,
      $3,
      $4,
      $5
      )
  ON CONFLICT (id) DO UPDATE SET
  bidbot_version = $2,
  deal_start_window = $3,
  cid_gravity_configured = $4,
  cid_gravity_strict = $5,
  last_seen_at = CURRENT_TIMESTAMP
`

type CreateOrUpdateStorageProviderParams struct {
	ID                   string `json:"id"`
	BidbotVersion        string `json:"bidbotVersion"`
	DealStartWindow      int64  `json:"dealStartWindow"`
	CidGravityConfigured bool   `json:"cidGravityConfigured"`
	CidGravityStrict     bool   `json:"cidGravityStrict"`
}

func (q *Queries) CreateOrUpdateStorageProvider(ctx context.Context, arg CreateOrUpdateStorageProviderParams) error {
	_, err := q.exec(ctx, q.createOrUpdateStorageProviderStmt, createOrUpdateStorageProvider,
		arg.ID,
		arg.BidbotVersion,
		arg.DealStartWindow,
		arg.CidGravityConfigured,
		arg.CidGravityStrict,
	)
	return err
}

const setStorageProviderUnhealthy = `-- name: SetStorageProviderUnhealthy :exec
UPDATE storage_providers SET last_unhealthy_error = $2, last_unhealthy_at = CURRENT_TIMESTAMP WHERE id = $1
`

type SetStorageProviderUnhealthyParams struct {
	ID                 string         `json:"id"`
	LastUnhealthyError sql.NullString `json:"lastUnhealthyError"`
}

func (q *Queries) SetStorageProviderUnhealthy(ctx context.Context, arg SetStorageProviderUnhealthyParams) error {
	_, err := q.exec(ctx, q.setStorageProviderUnhealthyStmt, setStorageProviderUnhealthy, arg.ID, arg.LastUnhealthyError)
	return err
}
