// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"database/sql"
	"fmt"
	"time"

	"github.com/textileio/bidbot/lib/auction"
	"github.com/textileio/broker-core/broker"
)

type BidEventType string

const (
	BidEventTypeStartFetching  BidEventType = "start_fetching"
	BidEventTypeErrorFetching  BidEventType = "error_fetching"
	BidEventTypeStartImporting BidEventType = "start_importing"
	BidEventTypeEndImporting   BidEventType = "end_importing"
	BidEventTypeFinalized      BidEventType = "finalized"
	BidEventTypeErrored        BidEventType = "errored"
)

func (e *BidEventType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BidEventType(s)
	case string:
		*e = BidEventType(s)
	default:
		return fmt.Errorf("unsupported scan type for BidEventType: %T", src)
	}
	return nil
}

type Auction struct {
	ID                       auction.ID           `json:"id"`
	BatchID                  broker.BatchID       `json:"batchID"`
	DealSize                 int64                `json:"dealSize"`
	DealDuration             uint64               `json:"dealDuration"`
	DealReplication          int32                `json:"dealReplication"`
	DealVerified             bool                 `json:"dealVerified"`
	FilEpochDeadline         uint64               `json:"filEpochDeadline"`
	ExcludedStorageProviders []string             `json:"excludedStorageProviders"`
	PayloadCid               string               `json:"payloadCid"`
	CarUrl                   string               `json:"carUrl"`
	CarIpfsCid               string               `json:"carIpfsCid"`
	CarIpfsAddrs             []string             `json:"carIpfsAddrs"`
	Status                   broker.AuctionStatus `json:"status"`
	ErrorCause               string               `json:"errorCause"`
	Duration                 int64                `json:"duration"`
	StartedAt                time.Time            `json:"startedAt"`
	UpdatedAt                time.Time            `json:"updatedAt"`
	ClientAddress            string               `json:"clientAddress"`
	Providers                []string             `json:"providers"`
}

type Bid struct {
	ID                       auction.BidID  `json:"id"`
	AuctionID                auction.ID     `json:"auctionID"`
	WalletAddrSig            []byte         `json:"walletAddrSig"`
	StorageProviderID        string         `json:"storageProviderID"`
	BidderID                 string         `json:"bidderID"`
	AskPrice                 int64          `json:"askPrice"`
	VerifiedAskPrice         int64          `json:"verifiedAskPrice"`
	StartEpoch               int64          `json:"startEpoch"`
	FastRetrieval            bool           `json:"fastRetrieval"`
	ReceivedAt               time.Time      `json:"receivedAt"`
	WonAt                    sql.NullTime   `json:"wonAt"`
	ProposalCid              sql.NullString `json:"proposalCid"`
	ProposalCidDeliveredAt   sql.NullTime   `json:"proposalCidDeliveredAt"`
	ProposalCidDeliveryError sql.NullString `json:"proposalCidDeliveryError"`
	DealConfirmedAt          sql.NullTime   `json:"dealConfirmedAt"`
	WonReason                sql.NullString `json:"wonReason"`
	DealFailedAt             sql.NullTime   `json:"dealFailedAt"`
}

type BidEvent struct {
	BidID      string         `json:"bidID"`
	EventType  BidEventType   `json:"eventType"`
	Attempts   sql.NullInt32  `json:"attempts"`
	Error      sql.NullString `json:"error"`
	HappenedAt time.Time      `json:"happenedAt"`
	ReceivedAt time.Time      `json:"receivedAt"`
}

type CompetitionResult struct {
	StorageProviderID string `json:"storageProviderID"`
	SuccessfulDeals   int64  `json:"successfulDeals"`
	AuctionsWon       int64  `json:"auctionsWon"`
	SuccessRate       int32  `json:"successRate"`
	Bonus             int32  `json:"bonus"`
	Total             int32  `json:"total"`
	Gibs              int64  `json:"gibs"`
	Qualified         bool   `json:"qualified"`
}

type StorageProvider struct {
	ID                   string         `json:"id"`
	BidbotVersion        string         `json:"bidbotVersion"`
	DealStartWindow      int64          `json:"dealStartWindow"`
	CidGravityConfigured bool           `json:"cidGravityConfigured"`
	CidGravityStrict     bool           `json:"cidGravityStrict"`
	FirstSeenAt          time.Time      `json:"firstSeenAt"`
	LastSeenAt           time.Time      `json:"lastSeenAt"`
	LastUnhealthyAt      sql.NullTime   `json:"lastUnhealthyAt"`
	LastUnhealthyError   sql.NullString `json:"lastUnhealthyError"`
}
