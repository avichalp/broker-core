// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xca\x4c\x29\xb6\xe6\x42\x12\x48\x2c\x4d\x2e\xc9\xcc\xcf\x2b\xb6\xe6\x02\x04\x00\x00\xff\xff\x2b\x30\x85\x77\x26\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 38, mode: os.FileMode(420), modTime: time.Unix(1629813095, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x5d\x6f\xe2\x30\x10\x7c\xe7\x57\xec\x5b\x41\xba\x7f\xd0\xa7\x94\x9a\x2a\xba\xe0\x54\xc1\x48\x54\xa7\x93\xb5\x89\x17\x6a\xd5\xc2\x91\xed\x70\xe5\x4e\xf7\xdf\x4f\x49\x28\x84\x8f\x00\xba\xd7\x9d\xd9\xf1\x7a\x77\x66\x9c\xb1\x48\x30\x10\xd1\x53\xc2\x20\x9e\x00\x4f\x05\xb0\x45\x3c\x13\x33\xc0\xaa\x08\xda\xae\x3d\x0c\x07\x00\x00\x5a\x41\xa0\xcf\x00\xaf\x59\x3c\x8d\xb2\x37\xf8\xce\xde\xbe\x35\x40\x8e\xa1\x78\x97\x5f\x70\x2d\xc0\xe7\x49\xd2\x62\x8a\xd0\x48\xaf\x7f\x13\xe4\x7a\xa5\xd7\x17\x61\x55\x39\xac\x1f\xba\x42\x71\x54\x1a\x5d\xb4\xac\x1e\xca\x86\x9c\x5e\x6a\x52\x90\x5b\x6b\x08\xd7\x27\x9c\xa5\x36\x92\x4a\x5b\xbc\x4b\x45\xa8\x8c\x5e\xf7\x4c\x44\x9f\x85\xa9\x14\x29\xe9\x83\x75\xb8\x22\x59\x3a\xbb\xd1\x8a\x9c\x6f\xbe\xf7\xe3\xe7\x9e\x0f\xcf\x6c\x12\xcd\x13\x01\x0f\x7f\xfe\x3e\xb4\xcd\x25\x6e\x8d\x45\x25\x8b\xcb\xcb\x28\xd0\xc9\xca\x99\x63\xe8\x20\xf3\x70\x60\xe9\x72\xe9\xcf\x55\xfa\xa9\xa8\xd4\x5d\x03\xfa\x80\xa1\xf2\x97\x66\x23\xe7\xac\x93\x05\x56\x9e\x6e\x3c\x7a\xfd\x5c\x3e\xa0\x0b\xa4\x24\x06\x10\xf1\x94\xcd\x44\x34\x7d\x3d\xd7\x1a\xcf\xb3\x8c\x71\x21\xf7\x94\xb6\xb9\x2a\x15\xfe\x47\x73\xd3\x3b\x7a\x1c\xec\xbc\x1c\xf3\x67\xb6\xe8\xf1\xb2\xdc\x6d\x20\xe5\xfb\xd2\xb0\x2d\xdd\xd9\xdf\x19\xb1\xab\x71\x28\x8f\x1e\x07\x83\x2b\xa1\xca\xb5\xba\x19\xa8\x9d\x6a\x1d\x29\xc1\x16\xe2\x64\xc3\xbf\xd0\x18\x0a\xcd\xc9\xa5\xd7\x2b\xc8\xb7\x81\xf0\xec\x0a\xc7\xe6\xed\x91\xca\xb5\xea\x07\xd1\x7f\xc8\xd2\xe9\x82\xe0\x29\x7e\x89\xf9\x29\xfc\x95\x37\x79\x83\xd7\x18\xa2\x8d\xde\x65\xc2\x12\x7d\x90\x8e\x82\xd3\xb4\x41\x03\x4f\x69\x9a\xb0\x88\x9f\x9f\x7d\x12\x25\x33\xd6\xb6\x38\x2a\x48\x6f\xfa\x8c\xb2\x5b\x93\x5d\x1f\xc1\xbb\x84\x3a\x5b\x5a\x8f\x66\x1f\xae\xf3\xb2\x54\x64\xf4\x86\xdc\x89\x7c\x3f\x71\x2b\x9b\xf0\x74\xe4\xc6\x29\x9f\x89\x2c\xaa\xff\xba\xfc\x90\x9d\x73\x4e\xd2\x8c\xc5\x2f\xbc\x3e\xf5\xf0\x50\x1e\x41\xc6\x26\x2c\x63\x7c\xcc\x0e\x4e\x1b\x6a\x35\xba\xc3\xd8\xb5\x9f\xba\x2f\xa4\xbc\x29\x75\xd5\x1f\x07\xff\x02\x00\x00\xff\xff\x22\x04\x62\xea\xe5\x05\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1509, mode: os.FileMode(420), modTime: time.Unix(1629832660, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
