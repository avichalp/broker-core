// Code generated by sqlc. DO NOT EDIT.
// source: storage_requests.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createBatch = `-- name: CreateBatch :exec
insert into batches (id, storage_request_ids) values ($1, $2)
`

type CreateBatchParams struct {
	ID                string   `json:"id"`
	StorageRequestIds []string `json:"storageRequestIds"`
}

func (q *Queries) CreateBatch(ctx context.Context, arg CreateBatchParams) error {
	_, err := q.exec(ctx, q.createBatchStmt, createBatch, arg.ID, pq.Array(arg.StorageRequestIds))
	return err
}

const createFinalDeal = `-- name: CreateFinalDeal :exec
insert into final_deals (
  batch_id,
  storage_provider_id,
  deal_id,
  deal_expiration,
  error_cause
) values ($1, $2, $3, $4, $5)
`

type CreateFinalDealParams struct {
	BatchID           string         `json:"batchID"`
	StorageProviderID string         `json:"storageProviderID"`
	DealID            int64          `json:"dealID"`
	DealExpiration    int64          `json:"dealExpiration"`
	ErrorCause        sql.NullString `json:"errorCause"`
}

func (q *Queries) CreateFinalDeal(ctx context.Context, arg CreateFinalDealParams) error {
	_, err := q.exec(ctx, q.createFinalDealStmt, createFinalDeal,
		arg.BatchID,
		arg.StorageProviderID,
		arg.DealID,
		arg.DealExpiration,
		arg.ErrorCause,
	)
	return err
}

const createStorageRequest = `-- name: CreateStorageRequest :exec
insert into storage_requests (id, data_cid, origin) values ($1, $2, $3)
`

type CreateStorageRequestParams struct {
	ID      string `json:"id"`
	DataCid string `json:"dataCid"`
	Origin  string `json:"origin"`
}

func (q *Queries) CreateStorageRequest(ctx context.Context, arg CreateStorageRequestParams) error {
	_, err := q.exec(ctx, q.createStorageRequestStmt, createStorageRequest, arg.ID, arg.DataCid, arg.Origin)
	return err
}

const listAll = `-- name: ListAll :many
select 
  batch_id,
  storage_provider_id,
  deal_id,
  data_cid,
  origin

from final_deals
inner join (
  select id, unnest(storage_request_ids) storage_request_id from batches
) as batches on batch_id = batches.id
inner join storage_requests on storage_request_id = storage_requests.id
`

type ListAllRow struct {
	BatchID           string `json:"batchID"`
	StorageProviderID string `json:"storageProviderID"`
	DealID            int64  `json:"dealID"`
	DataCid           string `json:"dataCid"`
	Origin            string `json:"origin"`
}

func (q *Queries) ListAll(ctx context.Context) ([]ListAllRow, error) {
	rows, err := q.query(ctx, q.listAllStmt, listAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllRow
	for rows.Next() {
		var i ListAllRow
		if err := rows.Scan(
			&i.BatchID,
			&i.StorageProviderID,
			&i.DealID,
			&i.DataCid,
			&i.Origin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
