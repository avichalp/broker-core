// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xcd\x2b\x28\x4a\x2d\x48\x2c\x4a\x4d\x89\x4f\x4a\x2c\x49\xce\x48\x2d\xb6\xe6\xc2\x2b\x1d\x5f\x5c\x92\x58\x52\x5a\x9c\x5a\x6c\x0d\x08\x00\x00\xff\xff\xf4\x83\xfe\xbc\x46\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 70, mode: os.FileMode(436), modTime: time.Unix(1626876262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xc1\x6e\xa3\x30\x10\xbd\xf3\x15\x73\x03\x24\x0e\xd9\xbd\xe6\xc4\x92\x61\x65\x2d\x98\xac\x31\x52\x72\xb2\x5c\x3c\x4d\x51\x09\x41\x60\xaa\xf4\xef\x2b\xe2\x92\x4b\xda\x48\xcd\x75\xe6\xbd\x37\xf3\xe6\x4d\x22\x30\x96\x08\x32\xfe\x93\x21\xb0\x14\x78\x21\x01\x77\xac\x94\x25\x4c\x5d\x3f\x50\xaf\x07\x32\xea\x49\xdb\xfa\x85\x46\x35\x5a\x6d\xa7\x91\x46\x08\x3c\x00\x80\xc6\x40\x99\xc7\x59\xc6\xb8\x84\xad\x60\x79\x2c\xf6\xf0\x0f\xf7\xd1\xa5\xd9\xe9\x23\x81\xc4\x9d\xbc\x68\xf2\x2a\xcb\xbc\x70\xed\x31\x5e\xa2\x90\xc0\xb8\x2c\xee\x0e\x78\xd3\xed\x34\xcf\x59\x45\xe0\xf7\xd4\x99\xa6\x3b\xf8\x61\x04\xc1\xaf\x08\x7c\x3a\x53\x3d\xd9\xa5\xf2\x3b\x02\xdf\x9c\x3a\xf2\xc3\xb5\xe7\x79\x3f\xf2\xf3\x69\x63\xb4\xa7\x41\x1f\x48\x19\xd2\xad\x6a\x8c\x5b\xfa\xc6\x8f\x5b\x0d\xc6\xa3\x6e\xdb\xa6\xb3\x57\x57\xb0\xc1\x34\xae\x32\x09\x2b\x87\x33\xda\x6a\x55\x2f\x32\x0b\xca\xf5\x06\xd2\xe6\x5d\x69\x0b\x92\xe5\x58\xca\x38\xdf\xde\xca\x24\x95\x10\xc8\xa5\xba\x42\x1c\xb5\x1e\x48\x5b\x32\x8f\x91\xa7\xde\x3c\x46\xbe\xb0\x93\x82\x97\x52\xc4\x73\xca\xcf\xaf\xea\x5e\x6a\x69\x21\x90\xfd\xe5\xf3\xd1\x02\x57\x0c\x41\x60\x8a\x02\x79\x82\x77\x3f\x2a\x68\x4c\x38\xff\xc7\x12\x60\xc5\xd9\xff\x0a\x81\xf1\x0d\xee\xbe\xe7\xa9\xc6\x9c\xa1\xe0\x5f\x46\xeb\x10\xd1\xf5\xe6\xb3\xf8\x47\x00\x00\x00\xff\xff\x45\xe0\x17\x08\xee\x02\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 750, mode: os.FileMode(436), modTime: time.Unix(1626876279, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
