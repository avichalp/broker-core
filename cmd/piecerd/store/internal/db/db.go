// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createUnpreparedBatchStmt, err = db.PrepareContext(ctx, createUnpreparedBatch); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUnpreparedBatch: %w", err)
	}
	if q.deleteUnpreparedBatchStmt, err = db.PrepareContext(ctx, deleteUnpreparedBatch); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUnpreparedBatch: %w", err)
	}
	if q.getNextPendingStmt, err = db.PrepareContext(ctx, getNextPending); err != nil {
		return nil, fmt.Errorf("error preparing query GetNextPending: %w", err)
	}
	if q.moveToPendingStmt, err = db.PrepareContext(ctx, moveToPending); err != nil {
		return nil, fmt.Errorf("error preparing query MoveToPending: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createUnpreparedBatchStmt != nil {
		if cerr := q.createUnpreparedBatchStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUnpreparedBatchStmt: %w", cerr)
		}
	}
	if q.deleteUnpreparedBatchStmt != nil {
		if cerr := q.deleteUnpreparedBatchStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUnpreparedBatchStmt: %w", cerr)
		}
	}
	if q.getNextPendingStmt != nil {
		if cerr := q.getNextPendingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNextPendingStmt: %w", cerr)
		}
	}
	if q.moveToPendingStmt != nil {
		if cerr := q.moveToPendingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing moveToPendingStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	createUnpreparedBatchStmt *sql.Stmt
	deleteUnpreparedBatchStmt *sql.Stmt
	getNextPendingStmt        *sql.Stmt
	moveToPendingStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		createUnpreparedBatchStmt: q.createUnpreparedBatchStmt,
		deleteUnpreparedBatchStmt: q.deleteUnpreparedBatchStmt,
		getNextPendingStmt:        q.getNextPendingStmt,
		moveToPendingStmt:         q.moveToPendingStmt,
	}
}
