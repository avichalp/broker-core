// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package broker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// APIServiceClient is the client API for APIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIServiceClient interface {
	CreateBR(ctx context.Context, in *CreateBRRequest, opts ...grpc.CallOption) (*CreateBRResponse, error)
	GetBR(ctx context.Context, in *GetBRRequest, opts ...grpc.CallOption) (*GetBRResponse, error)
}

type aPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServiceClient(cc grpc.ClientConnInterface) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) CreateBR(ctx context.Context, in *CreateBRRequest, opts ...grpc.CallOption) (*CreateBRResponse, error) {
	out := new(CreateBRResponse)
	err := c.cc.Invoke(ctx, "/cmd.brokerd.pb.broker.APIService/CreateBR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetBR(ctx context.Context, in *GetBRRequest, opts ...grpc.CallOption) (*GetBRResponse, error) {
	out := new(GetBRResponse)
	err := c.cc.Invoke(ctx, "/cmd.brokerd.pb.broker.APIService/GetBR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServiceServer is the server API for APIService service.
// All implementations must embed UnimplementedAPIServiceServer
// for forward compatibility
type APIServiceServer interface {
	CreateBR(context.Context, *CreateBRRequest) (*CreateBRResponse, error)
	GetBR(context.Context, *GetBRRequest) (*GetBRResponse, error)
	mustEmbedUnimplementedAPIServiceServer()
}

// UnimplementedAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServiceServer struct {
}

func (UnimplementedAPIServiceServer) CreateBR(context.Context, *CreateBRRequest) (*CreateBRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBR not implemented")
}
func (UnimplementedAPIServiceServer) GetBR(context.Context, *GetBRRequest) (*GetBRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBR not implemented")
}
func (UnimplementedAPIServiceServer) mustEmbedUnimplementedAPIServiceServer() {}

// UnsafeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServiceServer will
// result in compilation errors.
type UnsafeAPIServiceServer interface {
	mustEmbedUnimplementedAPIServiceServer()
}

func RegisterAPIServiceServer(s grpc.ServiceRegistrar, srv APIServiceServer) {
	s.RegisterService(&_APIService_serviceDesc, srv)
}

func _APIService_CreateBR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateBR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmd.brokerd.pb.broker.APIService/CreateBR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateBR(ctx, req.(*CreateBRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetBR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetBR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmd.brokerd.pb.broker.APIService/GetBR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetBR(ctx, req.(*GetBRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _APIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cmd.brokerd.pb.broker.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBR",
			Handler:    _APIService_CreateBR_Handler,
		},
		{
			MethodName: "GetBR",
			Handler:    _APIService_GetBR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/brokerd/pb/broker/broker.proto",
}
