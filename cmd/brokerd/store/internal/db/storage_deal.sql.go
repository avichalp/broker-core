// Code generated by sqlc. DO NOT EDIT.
// source: storage_deal.sql

package db

import (
	"context"

	"github.com/textileio/broker-core/broker"
)

const createStorageDeal = `-- name: CreateStorageDeal :exec
INSERT INTO storage_deals(
    id,
    status,
    rep_factor,
    deal_duration,
    car_url,
    car_ipfs_cid,
    car_ipfs_addrs,
    disallow_rebatching,
    auction_retries,
    fil_epoch_deadline,
    error,
    payload_cid,
    piece_cid,
    piece_size
    ) VALUES (
      $1,
      $2,
      $3,
      $4,
      $5,
      $6,
      $7,
      $8,
      $9,
      $10,
      $11,
      $12,
      $13,
      $14
      )
`

type CreateStorageDealParams struct {
	ID                 broker.StorageDealID     `json:"id"`
	Status             broker.StorageDealStatus `json:"status"`
	RepFactor          int                      `json:"repFactor"`
	DealDuration       int                      `json:"dealDuration"`
	CarUrl             string                   `json:"carUrl"`
	CarIpfsCid         string                   `json:"carIpfsCid"`
	CarIpfsAddrs       string                   `json:"carIpfsAddrs"`
	DisallowRebatching bool                     `json:"disallowRebatching"`
	AuctionRetries     int                      `json:"auctionRetries"`
	FilEpochDeadline   uint64                   `json:"filEpochDeadline"`
	Error              string                   `json:"error"`
	PayloadCid         string                   `json:"payloadCid"`
	PieceCid           string                   `json:"pieceCid"`
	PieceSize          uint64                   `json:"pieceSize"`
}

func (q *Queries) CreateStorageDeal(ctx context.Context, arg CreateStorageDealParams) error {
	_, err := q.exec(ctx, q.createStorageDealStmt, createStorageDeal,
		arg.ID,
		arg.Status,
		arg.RepFactor,
		arg.DealDuration,
		arg.CarUrl,
		arg.CarIpfsCid,
		arg.CarIpfsAddrs,
		arg.DisallowRebatching,
		arg.AuctionRetries,
		arg.FilEpochDeadline,
		arg.Error,
		arg.PayloadCid,
		arg.PieceCid,
		arg.PieceSize,
	)
	return err
}

const getStorageDeal = `-- name: GetStorageDeal :one
SELECT id, status, rep_factor, deal_duration, payload_cid, piece_cid, piece_size, car_url, car_ipfs_cid, car_ipfs_addrs, disallow_rebatching, auction_retries, fil_epoch_deadline, error, created_at, updated_at FROM storage_deals
WHERE id = $1
`

func (q *Queries) GetStorageDeal(ctx context.Context, id broker.StorageDealID) (StorageDeal, error) {
	row := q.queryRow(ctx, q.getStorageDealStmt, getStorageDeal, id)
	var i StorageDeal
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.RepFactor,
		&i.DealDuration,
		&i.PayloadCid,
		&i.PieceCid,
		&i.PieceSize,
		&i.CarUrl,
		&i.CarIpfsCid,
		&i.CarIpfsAddrs,
		&i.DisallowRebatching,
		&i.AuctionRetries,
		&i.FilEpochDeadline,
		&i.Error,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const reauctionStorageDeal = `-- name: ReauctionStorageDeal :exec
UPDATE storage_deals
SET auction_retries = auction_retries + 1,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) ReauctionStorageDeal(ctx context.Context, id broker.StorageDealID) error {
	_, err := q.exec(ctx, q.reauctionStorageDealStmt, reauctionStorageDeal, id)
	return err
}

const updateStorageDeal = `-- name: UpdateStorageDeal :exec
UPDATE storage_deals
SET status = $2,
    piece_cid = $3,
    piece_size = $4,
    updated_at = CURRENT_TIMESTAMP
    WHERE id = $1
`

type UpdateStorageDealParams struct {
	ID        broker.StorageDealID     `json:"id"`
	Status    broker.StorageDealStatus `json:"status"`
	PieceCid  string                   `json:"pieceCid"`
	PieceSize uint64                   `json:"pieceSize"`
}

func (q *Queries) UpdateStorageDeal(ctx context.Context, arg UpdateStorageDealParams) error {
	_, err := q.exec(ctx, q.updateStorageDealStmt, updateStorageDeal,
		arg.ID,
		arg.Status,
		arg.PieceCid,
		arg.PieceSize,
	)
	return err
}

const updateStorageDealStatus = `-- name: UpdateStorageDealStatus :exec
UPDATE storage_deals
SET status = $2,
    updated_at = CURRENT_TIMESTAMP
    WHERE id = $1
`

type UpdateStorageDealStatusParams struct {
	ID     broker.StorageDealID     `json:"id"`
	Status broker.StorageDealStatus `json:"status"`
}

func (q *Queries) UpdateStorageDealStatus(ctx context.Context, arg UpdateStorageDealStatusParams) error {
	_, err := q.exec(ctx, q.updateStorageDealStatusStmt, updateStorageDealStatus, arg.ID, arg.Status)
	return err
}

const updateStorageDealStatusAndError = `-- name: UpdateStorageDealStatusAndError :exec
UPDATE storage_deals
SET status = $2,
    error = $3,
    updated_at = CURRENT_TIMESTAMP
    WHERE id = $1
`

type UpdateStorageDealStatusAndErrorParams struct {
	ID     broker.StorageDealID     `json:"id"`
	Status broker.StorageDealStatus `json:"status"`
	Error  string                   `json:"error"`
}

func (q *Queries) UpdateStorageDealStatusAndError(ctx context.Context, arg UpdateStorageDealStatusAndErrorParams) error {
	_, err := q.exec(ctx, q.updateStorageDealStatusAndErrorStmt, updateStorageDealStatusAndError, arg.ID, arg.Status, arg.Error)
	return err
}
