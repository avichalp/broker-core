// Code generated by sqlc. DO NOT EDIT.
// source: unpin_job.sql

package db

import (
	"context"
	"time"
)

const createUnpinJob = `-- name: CreateUnpinJob :exec
INSERT INTO unpin_jobs(id, cid, type) VALUES ($1, $2, $3)
`

type CreateUnpinJobParams struct {
	ID   string `json:"id"`
	Cid  string `json:"cid"`
	Type int16  `json:"type"`
}

func (q *Queries) CreateUnpinJob(ctx context.Context, arg CreateUnpinJobParams) error {
	_, err := q.exec(ctx, q.createUnpinJobStmt, createUnpinJob, arg.ID, arg.Cid, arg.Type)
	return err
}

const deleteExecutingUnpinJob = `-- name: DeleteExecutingUnpinJob :exec
DELETE FROM unpin_jobs WHERE id = $1 AND executing
`

func (q *Queries) DeleteExecutingUnpinJob(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteExecutingUnpinJobStmt, deleteExecutingUnpinJob, id)
	return err
}

const nextUnpinJob = `-- name: NextUnpinJob :one
UPDATE unpin_jobs
SET executing = TRUE,
    updated_at = CURRENT_TIMESTAMP
WHERE id = (SELECT id FROM unpin_jobs
    WHERE (unpin_jobs.ready_at < CURRENT_TIMESTAMP AND NOT executing) OR
          (executing and extract(epoch from current_timestamp-unpin_jobs.updated_at) > $1::bigint)
    ORDER BY unpin_jobs.ready_at asc
    FOR UPDATE SKIP LOCKED
    LIMIT 1)
RETURNING id, executing, cid, type, ready_at, created_at, updated_at
`

func (q *Queries) NextUnpinJob(ctx context.Context, stuckEpochs int64) (UnpinJob, error) {
	row := q.queryRow(ctx, q.nextUnpinJobStmt, nextUnpinJob, stuckEpochs)
	var i UnpinJob
	err := row.Scan(
		&i.ID,
		&i.Executing,
		&i.Cid,
		&i.Type,
		&i.ReadyAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const unpinJobToPending = `-- name: UnpinJobToPending :exec
UPDATE unpin_jobs
SET executing = FALSE, ready_at = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND executing
`

type UnpinJobToPendingParams struct {
	ID      string    `json:"id"`
	ReadyAt time.Time `json:"readyAt"`
}

func (q *Queries) UnpinJobToPending(ctx context.Context, arg UnpinJobToPendingParams) error {
	_, err := q.exec(ctx, q.unpinJobToPendingStmt, unpinJobToPending, arg.ID, arg.ReadyAt)
	return err
}
