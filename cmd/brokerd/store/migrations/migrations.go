// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xcd\x2b\xc8\xcc\x8b\xcf\xca\x4f\x2a\xb6\xe6\x42\x12\xce\xcd\xcc\x4b\x2d\x8a\x4f\x49\x4d\xcc\x41\x15\x4f\x2a\xca\xcf\x4e\x2d\x8a\x2f\x4a\x2d\x2c\x4d\x2d\x2e\x41\x95\x2b\x2e\xc9\x2f\x4a\x4c\x4f\x85\xe9\x02\x04\x00\x00\xff\xff\xa8\x08\x00\x9a\x65\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 101, mode: os.FileMode(436), modTime: time.Unix(1626356794, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\xcd\x8e\xda\x4c\x10\xbc\xf3\x14\x7d\x5b\x90\xbe\xc3\x77\xcf\xc9\x61\x87\xc8\x0a\x98\x95\x19\xa4\xdd\xd3\xa8\x3d\xd3\xb0\x93\x9d\xf5\x38\xf3\xa3\x40\x9e\x3e\x02\x03\x01\xff\xac\x57\x7b\x49\xa4\x9c\xab\x6a\xda\xee\xaa\xae\x69\xce\x12\xce\x80\x27\x9f\xe7\x0c\xd2\x19\x64\x4b\x0e\xec\x31\x5d\xf1\x15\xf8\x60\x1d\x6e\x49\x28\x42\xe3\x61\x3c\x02\x00\xd0\x0a\x02\xed\x02\x3c\xe4\xe9\x22\xc9\x9f\xe0\x2b\x7b\xfa\xef\x08\xf8\x80\x21\x7a\xf0\xaf\x68\x8c\x2e\xc3\xf1\x9d\x6c\x3d\x9f\xd7\xa8\xa3\x4a\x6c\x50\x06\xeb\xa0\x0d\x1e\xde\x17\x2a\x3a\x0c\xda\x96\x1d\x78\x85\x7b\x63\x51\x09\x79\x1e\xde\x80\x35\x49\x7a\x1b\xf4\xfa\x27\x41\xa1\xb7\xed\xb7\x25\x3a\x11\x9d\xb9\x95\xc2\x3d\x9b\x25\xeb\x39\x87\xbb\xbb\xdf\x2c\x5d\x6d\x7c\x7b\x4a\x3f\x15\x95\x72\x7e\x80\xac\xb4\x47\x63\xec\x0f\xe1\xa8\xc0\x20\x9f\x75\xb9\x85\xc2\x5a\x43\x58\xb6\x45\xb3\x64\xbe\x62\xb5\x6e\xa3\x8d\xa0\xca\xca\xe7\x83\x37\xca\xe8\xb2\xe7\xef\xc8\x39\xeb\x86\x3e\xd8\x11\x06\x52\x02\x03\xf0\x74\xc1\x56\x3c\x59\x3c\xb4\xd9\xd3\x75\x9e\xb3\x8c\x8b\x0b\xa5\x16\xc7\x4a\x7d\x44\x7c\xd4\x4e\x3e\x8d\x46\x6f\xa4\xaf\x70\xf6\x85\x9c\x70\xf4\x3d\x92\x0f\x83\xf9\x53\x18\xb0\x2f\x04\xd7\x41\x16\x27\xca\xfb\x52\x7b\x74\x45\x48\x1b\xcb\x70\x13\xcc\xcb\xaf\xfd\x7f\xb5\x68\x21\x31\x7a\xfa\x0b\xd7\x5d\x8b\xa7\xcb\x6c\xc5\xf3\x24\xcd\x38\x6c\x5e\x44\x73\x27\xb3\x65\xce\xd2\x2f\xd9\x61\xa1\xe3\x06\x36\x81\x9c\xcd\x58\xce\xb2\x29\x6b\x94\xc2\x58\xab\xc9\x7b\xbc\x7c\xd5\x25\xb9\x9b\x1e\xe9\xb2\xa4\xb1\x7d\x8c\xf2\x50\x08\x3d\x68\xa1\x55\x0f\x52\x0f\xeb\xc6\xce\xe3\x3a\xaf\xe5\x08\xd2\xae\xd2\xa7\x26\xea\x3f\xa9\x7f\xdb\xe9\x93\xd1\x69\x76\xcf\x1e\xfb\x8d\x16\x17\x1f\x96\xd9\x6d\x00\xce\xc0\x40\x68\x62\x59\xe9\x52\x7c\xb3\xc5\xe0\xed\xd3\x8e\x64\x0c\xd7\xe5\xd9\xd1\x99\x3d\xdd\x10\xf6\x15\xf5\xdf\x3f\xaa\xfd\xc7\x2c\xf8\x93\xad\xfa\x2b\x00\x00\xff\xff\xc8\xae\xc0\x99\xd3\x07\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 2003, mode: os.FileMode(436), modTime: time.Unix(1627326395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
