// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xcd\x2b\xc8\xcc\x8b\xcf\xca\x4f\x2a\xb6\xe6\x42\x12\xce\xcd\xcc\x4b\x2d\x8a\x4f\x49\x4d\xcc\x41\x15\x2f\x2e\xc9\x2f\x4a\x4c\x4f\x8d\x2f\x4a\x2d\x2c\x4d\x2d\x2e\x41\x95\x4c\x4a\x2c\x49\xce\x48\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\x59\x6e\x97\xc8\x60\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 96, mode: os.FileMode(436), modTime: time.Unix(1627329790, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\x3d\x6f\xdb\x30\x10\xdd\xfd\x2b\x6e\x8b\x0d\x74\xe8\xde\x49\x75\xe8\x42\xa8\x2d\x07\x32\x0d\x24\x13\x71\x22\xcf\x0e\x5b\x46\x54\xf9\x81\xda\xfd\xf5\x85\x25\x4b\x8d\x23\x2b\x0a\xb2\xb4\x40\x57\xbd\x7b\xa4\xf8\x3e\x6e\x9e\xb3\x84\x33\xe0\xc9\xe7\x25\x83\x74\x01\xd9\x9a\x03\xbb\x4f\x37\x7c\x03\x05\x06\xf9\x48\x1e\xa6\x13\x00\x00\xad\x20\xd0\x21\xc0\x5d\x9e\xae\x92\xfc\x01\xbe\xb2\x87\x0f\x35\xe0\x03\x86\xe8\xc1\x3f\xa1\x31\xba\x0c\xf5\x09\xd9\x76\xb9\x6c\x50\x47\x95\xd8\xa1\x0c\xd6\x41\x1f\x54\x84\x46\xa8\xe8\x30\x68\x5b\x5e\xc1\x2b\x3c\x1a\x8b\x4a\xc8\xf6\xf2\x17\xb0\x26\x49\xaf\x83\x5e\xff\x22\x28\xf4\xbe\x7f\xb6\x44\x27\xa2\x33\x97\x54\xb8\x65\x8b\x64\xbb\xe4\x70\x73\xf3\x67\x4a\x57\x3b\xdf\xbf\x65\x78\x14\x95\x72\x7e\x64\x58\x69\x8f\xc6\xd8\x9f\xc2\x51\x2d\xb3\x2e\xf7\x50\x58\x6b\x08\xcb\x3e\x69\x91\x2c\x37\xac\xe1\xed\xb4\x11\x54\x59\xf9\x28\x14\xa1\x32\xba\x1c\x78\x1d\x39\x67\xdd\xd8\x0f\x3b\xc2\x40\x4a\x60\x00\x9e\xae\xd8\x86\x27\xab\xbb\xfe\xf4\x7c\x9b\xe7\x2c\xe3\xa2\x1b\x69\xc8\xb1\x52\xef\x21\xd7\xdc\xd9\xa7\xc9\xe4\x95\xdc\xf9\x60\x1d\xee\x49\x38\xfa\x11\xc9\x87\xd1\x00\x2a\x0c\x38\x94\x82\x5a\x5c\x71\xc6\xde\x96\xd7\x86\x22\x6d\x2c\xc3\x45\x24\xbb\x47\x7d\x7c\x26\xb1\x90\x18\x3d\xfd\x83\x42\x37\xe4\xf9\x3a\xdb\xf0\x3c\x49\x33\x0e\xbb\xef\xa2\x13\x63\xb1\xce\x59\xfa\x25\x3b\x49\x38\x6d\x3f\xce\x20\x67\x0b\x96\xb3\x6c\xce\xba\xea\x4f\xb5\x9a\xbd\xc5\xb1\x53\x8f\x5b\x9b\x2e\x14\x7f\x21\x2e\x46\x79\x6a\xfa\x00\x5a\x68\x35\x80\x3c\xe9\x92\xdc\x00\x56\xef\x10\xad\xae\xd7\xa0\x06\xe9\x50\xe9\xf3\x8a\x19\xee\xca\xff\x63\xe4\xd9\xc7\x34\xbb\x65\xf7\xd7\x7c\x14\x9d\xda\xeb\xac\x75\xb6\xfd\x34\x92\x83\x58\x56\xba\x14\xdf\x6c\x31\xda\x59\x3a\x90\x8c\xe1\xf9\xd6\xbb\xb2\xec\x06\x3a\x1d\x8e\x15\x0d\xd7\x17\xd5\xf1\x7d\x12\xff\xcd\x75\xf8\x3b\x00\x00\xff\xff\xd5\xf4\xe5\xe6\x86\x07\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1926, mode: os.FileMode(436), modTime: time.Unix(1627333382, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
