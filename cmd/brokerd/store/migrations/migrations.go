// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xcd\x2b\xc8\xcc\x8b\xcf\xca\x4f\x2a\xb6\xe6\x42\x12\xce\xcd\xcc\x4b\x2d\x8a\x4f\x49\x4d\xcc\x41\x15\x4f\x2a\xca\xcf\x4e\x2d\x8a\x2f\x4a\x2d\x2c\x4d\x2d\x2e\x41\x95\x2b\x2e\xc9\x2f\x4a\x4c\x4f\x85\xe9\x02\x04\x00\x00\xff\xff\xa8\x08\x00\x9a\x65\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 101, mode: os.FileMode(420), modTime: time.Unix(1626272048, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\x4d\x6f\xda\x40\x10\xbd\xf3\x2b\xe6\x16\x90\x7a\xe8\xbd\x27\x97\x2c\x95\x55\x30\x91\x59\xa4\xe4\xb4\x1a\xef\x0e\x64\x9b\x8d\xd7\xdd\x0f\x15\xfa\xeb\x2b\xec\x90\x00\xb6\x71\x94\x4b\x2b\xf5\xfc\xde\xec\x68\xdf\x7b\xf3\xa6\x39\x4b\x38\x03\x9e\x7c\x9d\x33\x48\x67\x90\x2d\x39\xb0\xfb\x74\xc5\x57\xe0\x83\x75\xb8\x25\xa1\x08\x8d\x87\xf1\x08\x00\x40\x2b\x08\xb4\x0b\x70\x97\xa7\x8b\x24\x7f\x80\xef\xec\xe1\x53\x0d\xf8\x80\x21\x7a\xf0\xcf\x68\x8c\x2e\x43\xfd\x4e\xb6\x9e\xcf\x1b\xd4\x51\x25\x36\x28\x83\x75\xd0\x06\x0f\xef\x0b\x15\x1d\x06\x6d\xcb\x0e\xbc\xc2\xbd\xb1\xa8\x84\x3c\x2e\xbf\x80\x35\x49\xba\x0e\x7a\xfd\x9b\xa0\xd0\xdb\xf6\xdb\x12\x9d\x88\xce\x9c\x8f\xc2\x2d\x9b\x25\xeb\x39\x87\x9b\x9b\x37\x96\xae\x36\xbe\xbd\xa5\x9f\x8a\x4a\x39\x3f\x40\x56\xda\xa3\x31\xf6\x97\x70\x54\x60\x90\x8f\xba\xdc\x42\x61\xad\x21\x2c\xdb\x43\xb3\x64\xbe\x62\xcd\x1c\x46\x79\xd0\x4a\x38\x0a\x4e\x93\x3f\xd3\xec\x95\xff\xb9\xe1\x6e\xb4\x11\x54\x59\xf9\x78\xf0\x51\x19\x5d\xf6\x28\x41\xce\x59\x37\xf4\x39\x47\x18\x48\x09\x0c\xc0\xd3\x05\x5b\xf1\x64\x71\xd7\x66\x4f\xd7\x79\xce\x32\x2e\x5e\x29\xcd\x70\xac\xd4\x47\x86\xeb\xd9\xc9\x97\xd1\xe8\x4a\x52\x0b\x67\x9f\xc8\x09\x47\x3f\x23\xf9\x30\x98\x55\x85\x01\xfb\x02\x73\x1a\x7a\xd1\x47\xb9\x1e\xf5\xda\x4a\x21\x6d\x2c\xc3\x55\x67\x6a\xc5\x85\xc4\xe8\xe9\x1f\xd4\xbd\x19\x9e\x2e\xb3\x15\xcf\x93\x34\xe3\xb0\x79\x12\x97\xe2\xcc\x96\x39\x4b\xbf\x65\x07\x65\xc7\x17\xd8\x04\x72\x36\x63\x39\xcb\xa6\xec\xa2\x49\xc6\x5a\x4d\xde\x63\xea\xb3\x2e\xc9\x9d\x95\xcf\x3b\xbc\x39\x5e\x46\x37\x5a\x68\xd5\x83\x34\xcb\x0e\x37\xdb\x85\x1e\x17\x76\x1e\x4e\x0d\xd2\xae\xd2\x2f\x05\xd6\x7f\x5d\xff\xb7\xd7\x2f\x56\xa7\xd9\x2d\xbb\xef\xb7\x5a\x9c\x38\xb1\xcc\xce\x43\xf0\x06\x0d\x44\x27\x96\x95\x2e\xc5\x0f\x5b\x0c\x56\x01\xed\x48\xc6\x70\xda\xbb\x1d\x75\xdb\x53\x15\x61\x5f\x51\x7f\x0b\xa0\xda\x7f\xcc\x86\xbf\x59\xb2\x7f\x02\x00\x00\xff\xff\x15\x78\x76\x00\x0e\x08\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 2062, mode: os.FileMode(420), modTime: time.Unix(1626271050, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
