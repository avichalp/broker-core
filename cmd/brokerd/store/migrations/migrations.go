// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\xcb\x6e\xdb\x3c\x10\x85\xf7\x7e\x8a\xd9\xe5\xff\x81\x2e\xda\x75\x57\x6a\x42\x03\x42\x65\x25\x90\x65\x20\x59\x11\x23\x72\xec\xb0\x65\x44\x96\x17\xd4\xee\xd3\x17\x96\xe2\x44\xb6\x6e\x41\x36\x6d\xd7\xe7\x8c\x86\x3a\xdf\xcc\x5c\x17\x2c\x29\x19\x94\xc9\x97\x8c\x41\xba\x84\xfc\xb6\x04\x76\x9f\xae\xcb\x35\xf8\x60\x1c\xee\x88\x4b\x42\xed\xe1\xbf\x05\x00\x80\x92\x10\x68\x1f\xe0\xae\x48\x57\x49\xf1\x00\x5f\xd9\xc3\x87\x46\xf0\x01\x43\xf4\xe0\x9f\x50\x6b\x55\x87\xe6\x3b\xf9\x26\xcb\x5a\xd5\x91\xe5\x5b\x14\xc1\x38\xe8\x8a\x70\xc3\x96\xc9\x26\x2b\xe1\x53\x6b\x3b\x76\xe2\x32\x3a\x0c\xca\xd4\x93\x4e\x8b\x07\x6d\x50\x72\x71\x7a\xd0\x79\x3f\xab\x48\xd0\xb4\xe8\xd5\x2f\x82\x4a\xed\xfa\x8f\x15\xe8\x78\x74\xfa\xbc\xf4\xe5\x01\x57\x57\xaf\x2e\x65\xb7\xbe\xdf\x65\xdc\x8a\x52\x3a\x3f\x63\x96\xca\xa3\xd6\xe6\x27\x77\x54\x61\x10\x8f\xaa\xde\x41\x65\x8c\x26\xac\xfb\x45\xcb\x24\x5b\xb3\xb6\x0e\xa3\x38\xa6\xc6\x1d\x05\xa7\xc8\x0f\xa7\xf7\xb1\xf5\x6e\x95\xe6\x64\x8d\x78\x3c\xb2\x95\x5a\xd5\x23\x49\x90\x73\xc6\xcd\xfd\x9c\x23\x0c\x24\x39\x06\x28\xd3\x15\x5b\x97\xc9\xea\xae\xef\xbe\xde\x14\x05\xcb\x4b\xfe\x62\x69\x8b\xa3\x95\xef\x29\x6e\x6a\xff\xff\xbc\x58\x4c\x4c\x6f\xe5\xcc\x77\x72\xdc\xd1\x8f\x48\x3e\xcc\xce\xaf\xc4\x80\x63\x03\xd3\x5d\x04\x3e\x66\x99\x1e\xff\x06\x25\x17\x26\xd6\x61\x92\x4c\x93\x38\x17\x18\x3d\xfd\xc5\xb9\x3f\xc7\x9e\xe6\x37\xec\x7e\x3a\x76\x7e\x99\xdd\x6d\xde\x27\x73\xe1\x99\x01\xfb\xa4\x6a\x72\x67\x47\xe9\x0d\x7c\x4e\xdb\x31\xac\x56\x4a\x8e\x28\x6d\xb3\xe3\xde\x0e\xa9\xa7\x86\x83\xcb\xd3\x88\xb4\xb7\xea\xf9\x9c\x8d\x6f\xd8\xbf\xcc\xbb\x43\x63\x88\xf5\x19\xac\x3e\xe7\x37\x7e\xb8\x43\xe1\xf2\x9b\xaf\xd2\xcc\xd8\xc4\xda\xaa\x9a\x7f\x33\xd5\xec\x29\xa0\x3d\x89\x18\xba\x77\x77\xe0\xdc\x8e\x9c\x8a\x70\xb0\x34\x7e\x05\x50\x1e\xde\xc7\xef\x4f\xc2\xff\x1d\x00\x00\xff\xff\x8b\x0f\xac\x71\x22\x08\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 2082, mode: os.FileMode(420), modTime: time.Unix(1626189947, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.up.sql": _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.up.sql": &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
