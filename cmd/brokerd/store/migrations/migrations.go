// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xcd\x2b\xc8\xcc\x8b\xcf\xca\x4f\x2a\xb6\xe6\x42\x12\xce\xcd\xcc\x4b\x2d\x8a\x4f\x49\x4d\xcc\x41\x15\x2f\x2e\xc9\x2f\x4a\x4c\x4f\x8d\x2f\x4a\x2d\x2c\x4d\x2d\x2e\x41\x95\x4c\x4a\x2c\x49\xce\x48\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\x59\x6e\x97\xc8\x60\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 96, mode: os.FileMode(436), modTime: time.Unix(1627329790, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\x3d\x6f\xdb\x30\x10\xdd\xfd\x2b\x6e\x8b\x0d\x74\xe8\xde\x49\x75\xe8\x42\xa8\x2d\x07\x12\x0d\x24\x13\x71\x22\xcf\x0e\x5b\x46\x54\xf9\x81\xda\xfd\xf5\x85\x25\x5b\x8d\x23\x2b\x0a\xb2\xb4\x40\x57\xbd\x7b\xa4\xf8\x3e\x6e\x9e\xb3\x84\x33\xe0\xc9\xe7\x25\x83\x74\x01\xd9\x9a\x03\xbb\x4f\x0b\x5e\x40\x89\x41\x3e\x92\x87\xe9\x04\x00\x40\x2b\x08\xb4\x0f\x70\x97\xa7\xab\x24\x7f\x80\xaf\xec\xe1\x43\x03\xf8\x80\x21\x7a\xf0\x4f\x68\x8c\xae\x42\x73\x42\xb6\x59\x2e\x5b\xd4\x51\x2d\xb6\x28\x83\x75\xd0\x07\x15\xa1\x11\x2a\x3a\x0c\xda\x56\x57\xf0\x1a\x0f\xc6\xa2\x12\xf2\x7c\xf9\x0b\x58\x93\xa4\xd7\x41\xaf\x7f\x11\x94\x7a\xd7\x3f\x5b\xa2\x13\xd1\x99\x4b\x2a\xdc\xb2\x45\xb2\x59\x72\xb8\xb9\xf9\x33\xa5\xeb\xad\xef\xdf\x32\x3c\x8a\x4a\x39\x3f\x32\xac\xb4\x47\x63\xec\x4f\xe1\xa8\x91\x59\x57\x3b\x28\xad\x35\x84\x55\x9f\xb4\x48\x96\x05\x6b\x79\x5b\x6d\x04\xd5\x56\x3e\x0a\x45\xa8\x8c\xae\x06\x5e\x47\xce\x59\x37\xf6\xc3\x8e\x30\x90\x12\x18\x80\xa7\x2b\x56\xf0\x64\x75\xd7\x9f\x9e\x6f\xf2\x9c\x65\x5c\x74\x23\x2d\x39\xd6\xea\x3d\xe4\x86\x3b\xfb\x34\x99\xbc\x92\x3b\x1f\xac\xc3\x1d\x09\x47\x3f\x22\xf9\x30\x1a\x40\x85\x01\x87\x52\xd0\x88\x2b\x4e\xd8\xdb\xf2\xda\x52\xa4\x8d\x55\xb8\x88\x64\xf7\xa8\x8f\xcf\x24\x16\x12\xa3\xa7\x7f\x50\xe8\x96\x3c\x5f\x67\x05\xcf\x93\x34\xe3\xb0\xfd\x2e\x3a\x31\x16\xeb\x9c\xa5\x5f\xb2\xa3\x84\xd3\xf3\xc7\x19\xe4\x6c\xc1\x72\x96\xcd\x59\x57\xfd\xa9\x56\xb3\xb7\x38\xf6\xa4\x2b\x72\xc7\x44\x9a\xb3\x59\x17\xba\xbf\x90\x18\xa3\x3c\xf6\x7d\x00\x2d\xb5\x1a\x40\xda\x5b\xae\x63\xcd\x26\xd1\xea\x7a\x19\x1a\x90\xf6\xb5\x3e\x2d\x9a\xe1\xc6\xfc\x3f\x76\x9e\xdc\x4c\xb3\x5b\x76\x3f\xec\xa6\xe8\x34\x5f\x67\x97\x2e\x9f\x81\x91\x64\xc4\xaa\xd6\x95\xf8\x66\xcb\xd1\x16\xd3\x9e\x64\x0c\xcf\xf7\xe0\x95\xf5\x37\xd0\xf2\x70\xa8\x69\xb8\xd0\xa8\x0e\xef\x93\xfb\x6f\x2e\xc8\xdf\x01\x00\x00\xff\xff\xe0\x5a\xe2\xb2\x98\x07\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1944, mode: os.FileMode(436), modTime: time.Unix(1627329792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
