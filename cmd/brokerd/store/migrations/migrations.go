// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xcd\x2b\xc8\xcc\x8b\xcf\xca\x4f\x2a\xb6\xe6\x42\x12\xce\xcd\xcc\x4b\x2d\x8a\x4f\x49\x4d\xcc\x41\x15\x4f\x2a\xca\xcf\x4e\x2d\x8a\x2f\x4a\x2d\x2c\x4d\x2d\x2e\x41\x95\x2b\x2e\xc9\x2f\x4a\x4c\x4f\x85\xe9\x02\x04\x00\x00\xff\xff\xa8\x08\x00\x9a\x65\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 101, mode: os.FileMode(420), modTime: time.Unix(1626386432, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x16\x1b\xf8\x0e\xdf\xbd\x27\xd5\xa1\x0b\xa1\xb6\x1c\xc8\x34\x90\x9c\x88\x15\xb9\x76\xd8\x30\xa2\xca\x1f\xd4\xee\xd3\x17\x96\x6c\x37\xb6\x24\x2b\xc8\xa5\x05\x7a\x9e\x59\x2e\x38\x33\x3b\xd3\x9c\x25\x9c\x01\x4f\x3e\xcf\x19\xa4\x33\xc8\x96\x1c\xd8\x63\xba\xe2\x2b\xf0\xc1\x3a\xdc\x92\x50\x84\xc6\xc3\x78\x04\x00\xa0\x15\x04\xda\x05\x78\xc8\xd3\x45\x92\x3f\xc1\x57\xf6\xf4\x5f\x0d\xf8\x80\x21\x7a\xf0\xaf\x68\x8c\x2e\x43\xfd\x4e\xb6\x9e\xcf\x1b\xd4\x51\x25\x36\x28\x83\x75\xd0\x06\x0f\xef\x0b\x15\x1d\x06\x6d\xcb\x0e\xbc\xc2\xbd\xb1\xa8\x84\x3c\x2d\xbf\x82\x35\x49\xba\x0d\x7a\xfd\x93\xa0\xd0\xdb\xf6\xdb\x12\x9d\x88\xce\x5c\x8e\xc2\x3d\x9b\x25\xeb\x39\x87\xbb\xbb\xdf\x2c\x5d\x6d\x7c\x7b\x4b\x3f\x15\x95\x72\x7e\x80\xac\xb4\x47\x63\xec\x0f\xe1\xa8\xc0\x20\x9f\x75\xb9\x85\xc2\x5a\x43\x58\xb6\x87\x66\xc9\x7c\xc5\x9a\x39\x8c\xf2\xa0\x95\x70\x14\x9c\x26\x7f\xa1\xd9\x99\xff\x7f\xc3\xdd\x68\x23\xa8\xb2\xf2\xf9\xe0\xa3\x32\xba\xec\x51\x82\x9c\xb3\x6e\xe8\x73\x8e\x30\x90\x12\x18\x80\xa7\x0b\xb6\xe2\xc9\xe2\xa1\xcd\x9e\xae\xf3\x9c\x65\x5c\x9c\x29\xcd\x70\xac\xd4\x47\x86\xeb\xd9\xc9\xa7\xd1\xe8\x46\x52\x0b\x67\x5f\xc8\x09\x47\xdf\x23\xf9\x30\x98\x55\x85\x01\xfb\x02\xf3\x36\xf4\xe2\x48\x79\x5f\xc2\x6b\x07\x85\xb4\xb1\x0c\x37\x0d\xa9\x85\x16\x12\xa3\xa7\xbf\x50\xee\x66\x78\xba\xcc\x56\x3c\x4f\xd2\x8c\xc3\xe6\x45\x5c\x6b\x32\x5b\xe6\x2c\xfd\x92\x1d\x04\x1d\x5f\x61\x13\xc8\xd9\x8c\xe5\x2c\x9b\xb2\xab\x02\x19\x6b\x35\x79\x8f\x97\xaf\xba\x24\x77\xd1\x39\x5d\x96\x5c\xa9\x7f\x3a\x88\x6e\xb4\xd0\xaa\x07\x69\x96\x75\x63\xa7\x75\x9d\xd7\x52\x83\xb4\xab\xf4\xb1\xb5\xfa\x4f\xea\xdf\x76\xfa\x68\x74\x9a\xdd\xb3\xc7\x7e\xa3\xc5\xd9\x87\x65\x76\x19\x80\x13\x30\x10\x9a\x58\x56\xba\x14\xdf\x6c\x31\x78\xfb\xb4\x23\x19\xc3\xdb\xa2\xed\xe8\xd7\x9e\x6e\x08\xfb\x8a\xfa\xef\x1f\xd5\xfe\x63\x16\xfc\xc9\x56\xfd\x15\x00\x00\xff\xff\x4d\x65\x23\x52\xff\x07\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 2047, mode: os.FileMode(420), modTime: time.Unix(1626975609, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
