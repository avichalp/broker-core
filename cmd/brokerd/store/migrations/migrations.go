// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x2a\xca\xcf\x4e\x2d\x8a\x2f\x4a\x2d\x2c\x4d\x2d\x2e\x29\x56\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\x82\xa8\x8e\x0c\xc0\xad\x38\xbe\xb8\x24\xb1\xa4\xb4\xd8\x9a\x8b\x0b\x10\x00\x00\xff\xff\x6a\xe0\xc1\x92\x5a\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 90, mode: os.FileMode(420), modTime: time.Unix(1626124611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6f\x13\x31\x10\xbd\xe7\x57\xcc\xad\x20\x71\x80\x33\xa7\xa5\x38\x52\xc4\x26\x54\x9b\x8d\x44\x4f\xd6\xac\x3d\x49\x0d\xae\x6d\xc6\xb6\x48\xf8\xf5\x28\xbb\xa4\x24\xca\x7e\xa0\x5e\xaa\x9e\xdf\x7b\x3b\xde\x37\xef\xcd\x6d\x25\x8a\x5a\x40\x5d\x7c\x2a\x05\x2c\xe6\xb0\xfa\x5a\x83\xf8\xb6\x58\xd7\x6b\x88\xc9\x33\xee\x48\x6a\x42\x1b\xe1\xcd\x0c\x00\xc0\x68\x48\xb4\x4f\x70\x57\x2d\x96\x45\x75\x0f\x5f\xc4\xfd\xbb\x16\x88\x09\x53\x8e\x10\x1f\xd1\x5a\xe3\x52\xfb\x9d\xd5\xa6\x2c\x3b\x94\x29\xc8\x2d\xaa\xe4\x19\xce\x41\xf8\x2c\xe6\xc5\xa6\xac\xe1\x43\x47\x3b\x4e\x92\x3a\x33\x26\xe3\xdd\x28\x33\xe0\xc1\x7a\xd4\x52\x9d\x1e\x74\x39\x2f\x18\x52\x34\x0e\x46\xf3\x9b\xa0\x31\xbb\xeb\xc7\x2a\x64\x99\xd9\x5e\x4a\x9f\x1e\x70\x73\xf3\x8f\x65\xc2\x36\x5e\x4f\x19\xa6\xa2\xd6\x1c\x27\xc8\xda\x44\xb4\xd6\xff\x92\x4c\x0d\x26\xf5\x60\xdc\x0e\x1a\xef\x2d\xa1\xbb\x16\xcd\x8b\x72\x2d\x3a\x1d\x66\x75\x74\x4d\x32\x25\x36\x14\xfb\xdd\x7b\xdf\x71\xb7\xc6\x4a\x0a\x5e\x3d\x1c\x77\xab\xad\x71\x03\x4e\x10\xb3\xe7\xa9\x9f\x63\xc2\x44\x5a\x62\x82\x7a\xb1\x14\xeb\xba\x58\xde\x5d\xb3\x6f\x37\x55\x25\x56\xb5\x7c\xa2\x74\xe2\x1c\xf4\x73\xc4\xad\xf6\xed\xc7\xd9\x6c\x24\xbd\x0d\xfb\x1f\xc4\x92\xe9\x67\xa6\x98\x26\xf3\xab\x31\xe1\x50\x60\xce\x8b\x20\x87\x28\xe3\xf1\x6f\x57\x29\x95\xcf\x2e\x8d\x6e\xa6\x75\x5c\x2a\xcc\x91\x5e\xa9\xef\x8f\xc6\x11\x5f\xdc\x8c\xff\xb0\xef\x14\xde\x7e\xb4\x31\x7a\x00\xe9\x86\x1d\x6b\xd5\x87\x9e\x06\xf6\x66\xbb\x05\x69\x1f\xcc\xdf\x6b\x33\x5c\x80\x57\xbd\x8e\xec\x82\x71\xf2\xbb\x6f\x26\x1b\x40\x7b\x52\x39\x9d\x9f\x9b\x9e\x2b\x33\xd0\x90\x74\x08\x34\x1c\x7e\xd4\x87\xe7\xf9\xf2\x92\xa6\xfe\x09\x00\x00\xff\xff\x65\x6e\xca\x8b\x19\x07\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1817, mode: os.FileMode(420), modTime: time.Unix(1626124611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
