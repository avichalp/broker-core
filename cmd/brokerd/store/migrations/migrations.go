// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xcd\x2b\xc8\xcc\x8b\xcf\xca\x4f\x2a\xb6\xe6\x42\x12\xce\xcd\xcc\x4b\x2d\x8a\x4f\x49\x4d\xcc\x41\x15\x4f\x2a\xca\xcf\x4e\x2d\x8a\x2f\x4a\x2d\x2c\x4d\x2d\x2e\x41\x95\x2b\x2e\xc9\x2f\x4a\x4c\x4f\x85\xe9\x02\x04\x00\x00\xff\xff\xa8\x08\x00\x9a\x65\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 101, mode: os.FileMode(420), modTime: time.Unix(1626272048, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\x4d\x6f\xda\x40\x10\xbd\xe7\x57\xcc\x2d\x20\xf5\xd0\x7b\x4f\x2e\x59\x2a\xab\x60\x22\xb3\x48\xc9\x69\x35\xde\x1d\xc8\x36\x1b\xaf\xbb\x1f\x2a\xf4\xd7\x57\xd8\x90\x00\xb6\x71\x94\x4b\x2b\xf5\xfc\xde\xec\x68\xdf\x7b\xf3\x26\x39\x4b\x38\x03\x9e\x7c\x9d\x31\x48\xa7\x90\x2d\x38\xb0\x87\x74\xc9\x97\xe0\x83\x75\xb8\x21\xa1\x08\x8d\x87\xd1\x0d\x00\x80\x56\x10\x68\x1b\xe0\x3e\x4f\xe7\x49\xfe\x08\xdf\xd9\xe3\xa7\x1a\xf0\x01\x43\xf4\xe0\x5f\xd0\x18\x5d\x86\xfa\x9d\x6c\x35\x9b\x35\xa8\xa3\x4a\xac\x51\x06\xeb\xa0\x0d\xee\xdf\x17\x2a\x3a\x0c\xda\x96\x1d\x78\x85\x3b\x63\x51\x09\x79\x5c\x7e\x01\x6b\x92\x74\x1d\xf4\xfa\x37\x41\xa1\x37\xed\xb7\x25\x3a\x11\x9d\x39\x1f\x85\x3b\x36\x4d\x56\x33\x0e\xb7\xb7\x6f\x2c\x5d\xad\x7d\x7b\x4b\x3f\x15\x95\x72\x7e\x80\xac\xb4\x47\x63\xec\x2f\xe1\xa8\xc0\x20\x9f\x74\xb9\x81\xc2\x5a\x43\x58\xb6\x87\xa6\xc9\x6c\xc9\x9a\x39\x8c\x72\xaf\x95\x70\x14\x9c\x26\x7f\xa6\xd9\x2b\xff\x73\xc3\x5d\x6b\x23\xa8\xb2\xf2\x69\xef\xa3\x32\xba\xec\x51\x82\x9c\xb3\x6e\xe8\x73\x8e\x30\x90\x12\x18\x80\xa7\x73\xb6\xe4\xc9\xfc\xbe\xcd\x9e\xac\xf2\x9c\x65\x5c\xbc\x52\x9a\xe1\x58\xa9\x8f\x0c\xd7\xb3\xe3\x2f\x37\x37\x57\x92\x5a\x38\xfb\x4c\x4e\x38\xfa\x19\xc9\x87\xc1\xac\x2a\x0c\xd8\x17\x98\xd3\xd0\x8b\x03\xe5\x7d\x09\xaf\x1d\x14\xd2\xc6\x32\x5c\x35\xa4\x16\x5a\x48\x8c\x9e\xfe\x41\xb9\x9b\xe1\xc9\x22\x5b\xf2\x3c\x49\x33\x0e\xeb\x67\x71\xa9\xc9\x74\x91\xb3\xf4\x5b\xb6\x17\x74\x74\x81\x8d\x21\x67\x53\x96\xb3\x6c\xc2\x2e\x0a\x64\xa4\xd5\xf8\x3d\x5e\xbe\xe8\x92\xdc\x59\xe7\x74\x59\x72\xa1\xfe\xf1\x20\xba\xd1\x42\xab\x1e\xa4\x59\xb6\x3f\xd5\x2e\xf4\xb8\xb0\xf3\x5e\x6a\x90\xb6\x95\x3e\xf4\x56\xff\x51\xfd\xdf\x5e\x1f\xac\x4e\xb3\x3b\xf6\xd0\x6f\xb5\x38\x71\x62\x91\x9d\x87\xe0\x0d\x1a\x88\x4e\x2c\x2b\x5d\x8a\x1f\xb6\x18\x6c\x00\xda\x92\x8c\xe1\xb4\x6e\x3b\x5a\xb6\xa7\x21\xc2\xae\xa2\xfe\x16\x40\xb5\xfb\x98\x0d\x7f\xb3\x5b\xff\x04\x00\x00\xff\xff\x0e\x80\x3a\x38\x05\x08\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 2053, mode: os.FileMode(420), modTime: time.Unix(1626286186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
