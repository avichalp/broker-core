// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xcd\x2b\xc8\xcc\x8b\xcf\xca\x4f\x2a\xb6\xe6\x42\x12\xce\xcd\xcc\x4b\x2d\x8a\x4f\x49\x4d\xcc\x41\x15\x4f\x2a\xca\xcf\x4e\x2d\x8a\x2f\x4a\x2d\x2c\x4d\x2d\x2e\x41\x93\x4b\x2c\x49\xce\x48\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\x3e\x87\xfa\x0b\x5f\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 95, mode: os.FileMode(436), modTime: time.Unix(1627328905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\x3d\x6f\xdb\x30\x10\xdd\xfd\x2b\x6e\x8b\x0d\x74\xe8\xde\x49\x75\xe8\x42\xa8\x2d\x07\x12\x0d\x24\x13\x71\x22\xcf\x09\x1b\x46\x54\xf9\x81\xda\xfd\xf5\x85\x25\x5b\x8d\x23\x2b\x0a\xb2\xb4\x40\x56\xbd\x7b\xa4\xf8\x3e\x6e\x9e\xb3\x84\x33\xe0\xc9\xd7\x25\x83\x74\x01\xd9\x9a\x03\xbb\x4d\x0b\x5e\x40\x89\x41\x3e\x90\x87\xe9\x04\x00\x40\x2b\x08\xb4\x0b\x70\x93\xa7\xab\x24\xbf\x83\xef\xec\xee\x53\x03\xf8\x80\x21\x7a\xf0\x4f\x68\x8c\xae\x42\x73\x42\xb6\x59\x2e\x5b\xd4\x51\x2d\xb6\x28\x83\x75\xd0\x07\x15\xa1\x11\x2a\x3a\x0c\xda\x56\x17\xf0\x1a\xf7\xc6\xa2\x12\xf2\x74\xf9\x0b\x58\x93\xa4\xd7\x41\xaf\x7f\x13\x94\xfa\xbe\x7f\xb6\x44\x27\xa2\x33\xe7\x54\xb8\x66\x8b\x64\xb3\xe4\x70\x75\xf5\x77\x4a\xd7\x5b\xdf\xbf\x65\x78\x14\x95\x72\x7e\x64\x58\x69\x8f\xc6\xd8\x5f\xc2\x51\x23\xb3\xae\xee\xa1\xb4\xd6\x10\x56\x7d\xd2\x22\x59\x16\xac\xe5\x6d\xb5\x11\x54\x5b\xf9\x20\x14\xa1\x32\xba\x1a\x78\x1d\x39\x67\xdd\xd8\x0f\x3b\xc2\x40\x4a\x60\x00\x9e\xae\x58\xc1\x93\xd5\x4d\x7f\x7a\xbe\xc9\x73\x96\x71\xd1\x8d\xb4\xe4\x58\xab\xf7\x90\x1b\xee\xec\xcb\x64\xf2\x5a\xee\x9c\x7d\x24\x27\x1c\xfd\x8c\xe4\xc3\x68\xfe\x14\x06\x1c\x0a\x41\xa3\xad\x38\x62\x6f\x8b\x6b\x4b\x91\x36\x56\xe1\x2c\x91\xdd\x9b\x3e\x3f\x53\x58\x48\x8c\x9e\xfe\x43\x9d\x5b\xf2\x7c\x9d\x15\x3c\x4f\xd2\x8c\xc3\xf6\x51\x74\x62\x2c\xd6\x39\x4b\xbf\x65\x07\x09\xa7\xa7\x8f\x33\xc8\xd9\x82\xe5\x2c\x9b\xb3\xae\xf9\x53\xad\x66\x6f\x31\xec\x49\x57\xe4\x0e\x81\x34\x27\xb3\xce\x74\x7f\x21\x31\x46\x79\xa8\xfb\x00\x5a\x6a\x35\x80\xb4\xb7\x5c\xc6\x9a\x45\xa2\xd5\xe5\x2e\x34\x20\xed\x6a\x7d\xdc\x33\xc3\x85\xf9\x38\x76\x1e\xdd\x4c\xb3\x6b\x76\x3b\xec\xa6\xe8\x34\x5f\x67\xe7\x2e\x9f\x80\x91\x64\xc4\xaa\xd6\x95\xf8\x61\xcb\xd1\x16\xd3\x8e\x64\x0c\xcf\xd7\xe0\x85\xed\x37\xd0\xf2\xb0\xaf\x69\xb8\xd0\xa8\xf6\xef\x93\xfb\x5f\xee\xc7\x3f\x01\x00\x00\xff\xff\x10\xfa\xf2\x2e\x97\x07\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1943, mode: os.FileMode(436), modTime: time.Unix(1627328679, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
