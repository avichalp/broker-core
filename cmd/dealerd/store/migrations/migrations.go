// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x2c\x4d\x2e\xc9\xcc\xcf\x8b\x4f\x49\x4d\xcc\x29\xb6\xe6\x82\xc8\x44\x06\xb8\x2a\x14\x97\x24\x96\x94\xc2\x45\x50\xd5\x26\x96\x24\x5a\x73\x01\x02\x00\x00\xff\xff\x00\x02\xb7\x1e\x45\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 69, mode: os.FileMode(436), modTime: time.Unix(1626974831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xdf\x6e\xe2\x3c\x10\xc5\xef\x79\x8a\xb9\x03\xa4\xaf\x4f\xd0\xab\x7c\xd4\xac\xa2\x05\x83\x82\x91\xca\x95\x35\xd8\x03\x1d\x11\xe2\xc8\x76\x2a\xda\xa7\x5f\x25\xfc\x51\x9b\x4d\xb2\xd2\xee\x95\xa5\xfc\x8e\xed\xf1\x99\x33\x99\x65\x22\x51\x02\x54\xf2\xff\x42\x40\x3a\x07\xb9\x52\x20\x5e\xd3\x8d\xda\x00\x56\x26\xb2\x2b\xb4\xc5\x88\x30\x19\x01\x00\xb0\x85\x48\x97\x08\xeb\x2c\x5d\x26\xd9\x0e\x7e\x8a\xdd\x7f\x0d\xd8\x63\x34\x6f\xfa\x8e\xeb\x43\xe4\x76\xb1\xb8\xb2\x12\x3f\x72\x87\x56\x9b\x1e\xcc\x64\x68\x18\x06\xfe\x24\xd8\xf3\x91\x8b\x36\xb7\x95\xc7\xba\xc8\x6e\x6a\x3c\x61\x24\xab\x31\x82\x4a\x97\x62\xa3\x92\xe5\xfa\x21\x81\x17\x31\x4f\xb6\x0b\x05\xb3\x6d\x96\x09\xa9\xf4\x43\xd2\xec\x9d\x3e\x8f\x46\x77\x73\x76\x6b\x01\x21\x62\xac\x02\x24\x1b\x10\x72\xbb\x6c\xfc\x18\x5b\xc2\xfc\xe9\x8c\x27\x2e\x8e\xe3\xfa\xc6\xb1\x71\xc5\x81\xfd\xb9\x29\xe9\xfa\xc5\x53\xe9\x7c\x7c\x3a\x70\x81\x39\x7f\x92\x1d\x8f\xbe\x1e\x3c\xe4\x3a\x61\x1e\xfe\x64\xfb\xd7\x16\xf5\xb8\x7f\xe6\x82\x7c\x5f\x67\x3c\x1b\xd2\x25\x79\x7d\xe4\x7d\xb3\x52\xe9\xcc\x5b\xb7\x99\x21\xa2\x8f\x43\x82\x77\xf2\x7c\x60\xb2\xb0\x77\x2e\x27\x2c\x5a\xf8\x80\x21\x6a\x4f\xd1\x33\xbd\x63\xde\x23\xba\x3f\xa8\xbb\xde\x3d\xdb\x1e\x72\xeb\xce\x6d\xf9\xce\xe8\x42\xa6\x8a\x5c\x1c\x7b\xee\x24\xef\x9d\xd7\x06\xab\x40\x5d\x47\x5f\x4b\x0e\x10\xce\x98\xe7\xbf\xbf\xba\xf4\xae\x74\x01\xf3\xbe\x04\xd7\x7d\xac\x8b\xee\x8e\x6f\x0d\xe9\x52\xf2\x50\x8a\x1b\xd1\x19\xfd\x89\xa2\xbe\x3d\xb0\x53\xe7\x09\xed\x47\x77\xd6\xff\x69\x1c\xae\x9b\xab\xd2\xfe\xfd\xe6\xd9\x4a\x6e\x54\x96\xa4\x52\xc1\xe1\xa4\xdb\xa9\x9d\xaf\x32\x91\xfe\x90\x75\xac\x27\x2d\x36\x85\x4c\xcc\x45\x26\xe4\x4c\x7c\xff\x21\x4d\xd8\x4e\xdb\x73\x9a\xca\x17\xf1\x3a\x34\x4e\xfa\x31\x0c\x2b\xd9\x1e\xb4\x3b\x9a\x3e\x8f\x7e\x05\x00\x00\xff\xff\xd1\xfc\x73\x19\x14\x05\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1300, mode: os.FileMode(436), modTime: time.Unix(1627328977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
