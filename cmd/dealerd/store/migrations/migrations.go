// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/.001_init.up.sql.swp
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initUpSqlSwp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x4d\x8b\x23\x45\x18\xc7\xff\x23\x78\x30\x93\x74\x44\x2f\xa2\x1e\x4a\x3d\x24\x81\x9d\x24\xbb\x7a\x58\x5c\x50\xe3\x6c\x47\x82\x49\xcf\xd8\xe9\xc8\xcc\x41\xcb\x4a\x77\x25\x53\xa4\xd3\xd5\x56\x57\x96\x99\x15\x5f\x40\xc5\x4f\xe0\x45\x3c\xef\xd1\x83\x77\xf1\xe0\x17\x10\x05\x4f\x7a\x13\xbf\x80\xa8\x78\x50\x24\xaf\xce\x8e\x99\x30\xac\xe2\x22\x3e\xbf\x4b\xd1\xf5\xfc\x9f\x27\xff\x7a\x79\x02\x21\xdd\xaf\xbf\xdc\xea\xb0\xab\xd5\x2b\x00\x70\x3f\x90\x7f\xe7\xd7\xd7\x1e\xfa\xe5\xde\xad\xa7\xbf\x00\x46\xe2\x04\x17\x61\x2c\xc2\xea\x91\xb2\x46\x27\x47\x93\x7e\xf5\x48\x8f\xe5\x7a\xdd\x5b\x23\x71\x52\x0b\x75\x24\x6b\x56\x1e\x5b\x15\x4b\xa5\x6b\x7d\xa3\x47\xd2\xec\x84\xda\xc8\x5a\x38\x8e\x6a\x91\x14\xb1\x34\x51\x2d\xb3\xd3\x99\xb1\x1a\x1a\x61\x95\x4e\xb2\x5a\xbd\x7e\x99\xab\x44\xd9\xea\x24\xad\x66\xaf\xc7\x17\x32\x46\x10\xc4\x9c\x89\x1d\xec\x5c\x2d\xe0\xc9\x2b\x97\xeb\xd3\xc7\x27\x1e\x7f\x8c\x3d\xf8\x40\xef\x6e\xbb\x22\x08\x82\x20\x08\x82\x20\x08\xe2\x5f\xc4\xa6\x5b\x78\x1b\xc0\x3d\x8b\xe7\xca\x62\xdc\x3a\x33\x12\x04\x41\x10\x04\x41\x10\x04\x41\x10\x04\xf1\xdf\x45\x44\xc0\x0f\xf7\x01\xb7\x72\xf3\xff\xff\x97\xbf\xff\xbf\x29\x02\x9f\x15\x81\x8f\x8a\xc0\x1b\x45\xe0\xd5\x22\xf0\x4c\x11\x60\x45\xe0\x7b\x07\xf8\xce\x01\xbe\x75\x80\xcf\x1d\xe0\x13\x07\xf8\xd8\x01\x3e\x70\x80\xf7\x1c\xe0\x5d\x07\x38\x70\x80\x67\x1d\xe0\x51\x07\x80\x03\x7c\x5d\x00\x3e\x2d\x00\xef\x17\x00\xbf\x00\x3c\x55\x00\x1e\x2e\x00\xbf\xe7\x81\x2f\xf3\xc0\xad\x3c\xf0\x66\x1e\x78\x25\x0f\x3c\x97\x07\x1e\xc9\x03\x3f\x6e\x03\x5f\x6d\x03\x1f\x6e\x03\x07\xdb\xc0\x6f\x39\xe0\xe7\x1c\xf0\x53\x6e\xee\xf7\xa5\x1c\xb0\x9f\xbb\xcb\x1b\x48\x10\x04\x41\x10\x04\xf1\x7f\x67\xd7\x77\x1b\x81\xcb\x5a\xde\x75\xf7\x80\xb5\x9a\xcc\xdb\x0b\x98\x7b\xd0\xea\x06\x5d\x26\x26\xa1\x55\x3a\xe1\x91\x14\x71\xc6\xc7\x2a\x91\x86\xab\x88\xed\x79\x8b\xc8\xf9\xa9\x7f\xa3\xe8\x22\xc2\xca\xcb\x50\xe5\x1a\xc0\x18\x63\x95\x6b\xb3\x61\x77\xcf\xeb\x06\x7e\xa3\xe5\x05\x6c\x30\xe2\xab\x1c\x61\xc5\xb4\x4c\x73\xcf\x77\x5b\x2f\x78\xec\x45\xf7\xb0\x7c\x26\x56\x61\xbe\xdb\x74\x7d\xd7\xdb\x75\x4f\xb9\x10\x56\x94\x55\x54\x99\x95\x9e\xa4\x91\xb0\x32\xe2\xc2\xb2\xa0\xd5\x71\xbb\x41\xa3\xb3\x3f\xb3\xee\xf5\xda\x6d\x76\xdd\x6d\x36\x7a\xed\x80\xed\xf6\x7c\xdf\xf5\x02\xbe\x92\x5c\x9a\x25\x87\x46\xde\x79\xb2\x91\x22\x3a\x59\x9f\x3a\x17\x4c\xf7\x84\x8f\x85\x19\x49\xcb\x33\x2b\xec\x24\x63\x7d\x35\x54\x89\x5d\xa7\x93\xc7\xa9\x9a\xbf\x86\xbb\x41\xa4\xa2\xf5\xc1\xd4\xe8\x54\x67\x22\xe6\xa1\x8a\x98\x95\xc7\x67\xe3\x46\x5a\xa3\x64\xc6\xb2\xb1\x88\xe3\xd3\xe9\xab\x35\xd6\xe7\x42\x69\x8c\x36\x3c\x14\x93\x4c\xde\x5e\x67\x25\x2c\x95\x16\xca\x63\x19\x4e\xac\x4a\x86\xac\xaf\x75\x2c\x45\xf2\x57\x69\xb3\xd1\xee\xba\x73\xf5\x62\xf9\x8b\xe1\x76\x73\x7d\x15\xf1\xf5\xb6\x97\x07\xbe\x3e\x3a\x10\x99\xe5\xf3\x95\xdd\x10\xf1\x85\x6c\xdc\x90\x46\x0d\x94\x8c\x2e\xea\xd9\x58\x2e\x53\x1d\x1e\x9d\xb7\xeb\x2a\x94\x3c\x95\x86\x0f\x55\x7f\x36\x6e\x10\xaf\x9a\x66\xc3\x3a\x97\x0d\xb1\x46\xb2\x9c\xdd\xf7\x5b\x9d\x86\x7f\x38\xed\x95\x4b\xcb\xaf\x81\xa0\xf1\x7c\xdb\xdd\xd4\xb1\xac\x0c\xcc\x3a\xb1\x64\x64\xaa\x8d\xdd\x19\xa8\x44\xc4\xea\xa6\x8c\x4a\xd3\xc9\x50\x27\x03\x65\xc6\xb3\xcb\x37\x3b\xdd\xd2\x34\x6b\x67\x2c\x46\x2a\x19\x96\xfe\xfc\x98\xc3\x7d\x77\x79\x82\x8d\x2e\x73\xbd\x5e\x67\x5a\xf8\x54\x9b\xdf\x61\x3b\xcd\xef\xf7\x64\xd3\xed\x4f\x95\x0c\x25\xcf\xd4\x4d\xb9\x29\x7e\xce\xed\x4f\xc5\x49\xac\x45\x74\x5e\x38\xb3\xda\x88\xa1\xe4\xcb\x0e\xfb\x27\x77\x5f\x58\xc1\xca\xf8\x23\x00\x00\xff\xff\x8a\x31\xc7\xe3\x00\x30\x00\x00")

func _001_initUpSqlSwpBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSqlSwp,
		".001_init.up.sql.swp",
	)
}

func _001_initUpSqlSwp() (*asset, error) {
	bytes, err := _001_initUpSqlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".001_init.up.sql.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1626963992, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x2c\x4d\x2e\xc9\xcc\xcf\x8b\x4f\x49\x4d\xcc\x29\xb6\xe6\x82\xc8\x44\x06\xb8\x2a\x14\x97\x24\x96\x94\xc2\x45\x50\xd5\x26\x96\x24\x5a\x73\x01\x02\x00\x00\xff\xff\x00\x02\xb7\x1e\x45\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 69, mode: os.FileMode(420), modTime: time.Unix(1626964781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x41\x8f\xda\x30\x10\x85\xef\xfc\x8a\xb9\x05\xa4\xae\xd4\xfb\x9e\x52\xd6\x54\x51\x21\xa0\xc4\x48\xcb\xc9\x1a\xe2\x81\x8e\x08\x71\x64\x3b\x2b\x76\x7f\x7d\x95\x84\x20\xa0\x21\x5d\x75\x4f\x96\xf2\xbe\xb1\x3d\x6f\xfc\x32\x4d\x44\x28\x05\xc8\xf0\xc7\x5c\x40\x34\x83\x78\x29\x41\xbc\x46\xa9\x4c\x01\xab\xcc\xb3\x29\x94\x46\x8f\x30\x1e\x01\x00\xb0\x06\x4f\x27\x0f\xab\x24\x5a\x84\xc9\x06\x7e\x89\xcd\xb7\x46\x70\xde\x58\xdc\x93\xd2\x84\xb9\xea\xa8\x7a\xaf\x78\x3d\x9f\xb7\x48\x89\xef\xb9\x41\xad\xb2\x07\x32\x53\x46\xc3\xa2\xe3\x0f\x82\x2d\xef\xb9\xb8\xd7\x75\x65\xb1\xbe\x6b\xbf\x9a\x59\x42\x4f\x5a\xa1\x07\x19\x2d\x44\x2a\xc3\xc5\xea\x82\xc0\x8b\x98\x85\xeb\xb9\x84\xe9\x3a\x49\x44\x2c\xd5\x05\x69\x6a\x27\xcf\xa3\x51\xe7\xd1\x66\x25\xc0\x79\xf4\x95\x83\x30\x05\x11\xaf\x17\x8d\x2d\x41\xdd\xf4\xd3\x11\x0f\x5c\xec\x83\xfa\xc4\x20\x33\xc5\x8e\xed\xb1\xb9\x52\xfb\xc5\x52\x69\xac\x7f\xda\x71\x81\x39\x7f\x90\x0e\x46\xd7\x1b\x0f\x99\x4f\x98\xbb\x7f\xb9\x7f\x3d\xa9\x07\xee\x1f\xb9\x20\xfb\x68\x32\x96\x33\x52\x25\x59\xb5\xe7\x6d\xb3\x52\x69\xb2\xdf\xfd\x66\x3a\x8f\xd6\x0f\x01\x6f\x64\x79\xc7\xa4\x61\x6b\x4c\x4e\x58\xfc\xed\xf4\x2c\x9c\xa7\xa2\x85\x77\xe8\xbc\xb2\xe4\x2d\xd3\x1b\xe6\x9f\x2a\xe9\x9a\xed\xef\x65\xcb\xfa\x81\x72\x9e\xdc\x79\xb9\xd5\xe8\x44\x59\xe5\xb9\xd8\x7f\xea\x06\x64\xad\xb1\x2a\xc3\xca\xd1\xed\x41\x17\x38\x08\x5a\xb2\xed\xcc\x81\x3b\x62\x9e\x5f\x5b\x75\x21\xbf\x77\x23\x30\xa5\x71\x98\x3f\x0a\x40\x97\xab\xfe\xd7\x5f\x8b\x74\x2a\x79\x28\x04\x0d\x74\x44\x7b\x20\xaf\xce\x1e\xf4\x72\x96\x50\xbf\xf7\x47\xe5\x4b\x69\x6a\x8b\xab\x52\xff\x7f\xf1\x74\x19\xa7\x32\x09\xa3\x58\xc2\xee\xa0\xee\x1f\xfd\x6c\x99\x88\xe8\x67\x5c\xa7\x62\x7c\xa7\x4d\x20\x11\x33\x91\x88\x78\x2a\x6e\x7f\x6b\x63\xd6\x93\xfb\x98\x47\xf1\x8b\x78\x1d\x4a\xa3\xba\x64\x69\x19\xdf\xe7\xb4\x93\x26\xcf\xa3\x3f\x01\x00\x00\xff\xff\x65\x14\x52\x56\x5a\x05\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1370, mode: os.FileMode(420), modTime: time.Unix(1626964781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".001_init.up.sql.swp": _001_initUpSqlSwp,
	"001_init.down.sql":    _001_initDownSql,
	"001_init.up.sql":      _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".001_init.up.sql.swp": &bintree{_001_initUpSqlSwp, map[string]*bintree{}},
	"001_init.down.sql":    &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":      &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
