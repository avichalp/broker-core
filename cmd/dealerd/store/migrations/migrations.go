// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x2c\x4d\x2e\xc9\xcc\xcf\x8b\x4f\x49\x4d\xcc\x29\xb6\xe6\x82\xc8\x44\x06\xb8\x2a\x14\x97\x24\x96\x94\xc2\x45\x50\xd5\x26\x96\x24\x5a\x73\x01\x02\x00\x00\xff\xff\x00\x02\xb7\x1e\x45\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 69, mode: os.FileMode(436), modTime: time.Unix(1626974831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xc1\x8e\xda\x30\x10\xbd\xf3\x15\x73\x03\xa4\xee\x17\xec\x29\x65\x4d\x15\x15\x0c\x0a\x46\x5a\x4e\xd6\x10\x0f\x74\x44\x12\x47\xb6\xb3\x62\xf7\xeb\xab\x04\x82\x76\xd3\x24\x95\xda\x93\xa5\xbc\xe7\xf1\xcc\x9b\xf7\xb2\x48\x44\xa4\x04\xa8\xe8\xfb\x4a\x40\xbc\x04\xb9\x51\x20\x5e\xe3\x9d\xda\x01\x56\x69\x60\x5b\x68\x83\x01\x61\x36\x01\x00\x60\x03\x81\xae\x01\xb6\x49\xbc\x8e\x92\x03\xfc\x14\x87\x6f\x0d\xe0\x83\x75\x78\x26\x6d\x08\x33\xdd\xb2\xea\x5a\x72\xbf\x5a\xdd\x28\x25\xbe\x67\x16\x8d\x4e\x07\x60\xa6\x94\xc6\x41\xcf\x1f\x04\x47\x3e\x73\xd1\xc5\x4d\xe5\xb0\xee\xb5\x1f\x4d\x1d\x61\x20\xa3\x31\x80\x8a\xd7\x62\xa7\xa2\xf5\xf6\x41\x81\x17\xb1\x8c\xf6\x2b\x05\x8b\x7d\x92\x08\xa9\xf4\x83\xd2\xdc\x9d\x3f\x4f\x26\xad\x46\x87\xad\x00\x1f\x30\x54\x1e\xa2\x1d\x08\xb9\x5f\x37\xb2\x4c\xeb\xa1\x9f\x72\xbc\x70\x71\x9e\xd6\x2f\x4e\x53\x5b\x9c\xd8\xe5\x4d\x4b\xb7\x2f\x8e\x4a\xeb\xc2\xd3\x89\x0b\xcc\xf8\x83\xcc\x74\xf2\xb9\xf0\x98\xf8\x84\x99\xff\x9b\xfa\x9f\x37\x35\xa0\x7e\xce\x05\xb9\xa1\xcd\x38\x4e\x49\x97\xe4\xf4\x99\x8f\xcd\x49\xa5\x4d\x7f\xf5\x8b\xe9\x03\xba\x30\x46\x78\x23\xc7\x27\x26\x03\x47\x6b\x33\xc2\xa2\x03\x9f\xd0\x07\xed\x28\x38\xa6\x37\xcc\x06\x48\xed\x40\xfd\xfd\x1e\xd9\x0c\x20\xf7\xed\xdc\x8f\xaf\x18\x5d\x29\xad\x02\x17\xe7\x81\x37\xc9\x39\xeb\x74\x8a\x95\xa7\xbe\xd2\xb7\x96\x3d\xf8\x1c\xb3\xec\xcf\xa9\x4b\x67\x4b\xeb\x31\x1b\x72\x70\x1b\x8c\x7e\xfb\xd6\x20\x5d\x4b\x1e\x73\x71\x43\xca\xd1\x5d\x28\xe8\xfb\x80\xbd\x3c\x47\x68\xde\xfb\xbd\xfe\x5f\x71\xb8\x5d\xae\x4a\xf3\xef\x97\x17\x1b\xb9\x53\x49\x14\x4b\x05\xa7\x8b\xee\xba\x76\xb9\x49\x44\xfc\x43\xd6\xb6\x9e\x75\xb0\x39\x24\x62\x29\x12\x21\x17\xe2\xeb\x7f\x69\xc6\x66\xde\xcd\x69\x2c\x5f\xc4\xeb\x58\x9c\xf4\x23\x0c\x1b\xd9\x0d\x5a\x0b\xcd\x9f\x27\xbf\x03\x00\x00\xff\xff\x45\x30\xf4\x5b\x1b\x05\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 1307, mode: os.FileMode(436), modTime: time.Unix(1626974831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
