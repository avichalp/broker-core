// Code generated by sqlc. DO NOT EDIT.
// source: auction_data.sql

package db

import (
	"context"

	"github.com/lib/pq"
	"github.com/textileio/broker-core/broker"
)

const createAuctionData = `-- name: CreateAuctionData :exec
INSERT INTO auction_data(
    id,
    batch_id,
    payload_cid,
    piece_cid,
    piece_size,
    duration
    ) VALUES (
      $1,
      $2,
      $3,
      $4,
      $5,
      $6
      )
`

type CreateAuctionDataParams struct {
	ID         string         `json:"id"`
	BatchID    broker.BatchID `json:"batchID"`
	PayloadCid string         `json:"payloadCid"`
	PieceCid   string         `json:"pieceCid"`
	PieceSize  uint64         `json:"pieceSize"`
	Duration   uint64         `json:"duration"`
}

func (q *Queries) CreateAuctionData(ctx context.Context, arg CreateAuctionDataParams) error {
	_, err := q.exec(ctx, q.createAuctionDataStmt, createAuctionData,
		arg.ID,
		arg.BatchID,
		arg.PayloadCid,
		arg.PieceCid,
		arg.PieceSize,
		arg.Duration,
	)
	return err
}

const createRemoteWallet = `-- name: CreateRemoteWallet :exec
INSERT INTO remote_wallet(
   auction_data_id,
   peer_id,
   auth_token,
   wallet_addr,
   multiaddrs
   ) VALUES (
   $1,
   $2,
   $3,
   $4,
   $5)
`

type CreateRemoteWalletParams struct {
	AuctionDataID string   `json:"auctionDataID"`
	PeerID        string   `json:"peerID"`
	AuthToken     string   `json:"authToken"`
	WalletAddr    string   `json:"walletAddr"`
	Multiaddrs    []string `json:"multiaddrs"`
}

func (q *Queries) CreateRemoteWallet(ctx context.Context, arg CreateRemoteWalletParams) error {
	_, err := q.exec(ctx, q.createRemoteWalletStmt, createRemoteWallet,
		arg.AuctionDataID,
		arg.PeerID,
		arg.AuthToken,
		arg.WalletAddr,
		pq.Array(arg.Multiaddrs),
	)
	return err
}

const getAuctionData = `-- name: GetAuctionData :one
SELECT id, batch_id, payload_cid, piece_cid, piece_size, duration, created_at FROM auction_data
WHERE id = $1
`

func (q *Queries) GetAuctionData(ctx context.Context, id string) (AuctionDatum, error) {
	row := q.queryRow(ctx, q.getAuctionDataStmt, getAuctionData, id)
	var i AuctionDatum
	err := row.Scan(
		&i.ID,
		&i.BatchID,
		&i.PayloadCid,
		&i.PieceCid,
		&i.PieceSize,
		&i.Duration,
		&i.CreatedAt,
	)
	return i, err
}

const getRemoteWallet = `-- name: GetRemoteWallet :one
SELECT auction_data_id, peer_id, auth_token, wallet_addr, multiaddrs, created_at, updated_at FROM remote_wallet
where auction_data_id = $1
`

func (q *Queries) GetRemoteWallet(ctx context.Context, auctionDataID string) (RemoteWallet, error) {
	row := q.queryRow(ctx, q.getRemoteWalletStmt, getRemoteWallet, auctionDataID)
	var i RemoteWallet
	err := row.Scan(
		&i.AuctionDataID,
		&i.PeerID,
		&i.AuthToken,
		&i.WalletAddr,
		pq.Array(&i.Multiaddrs),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeAuctionData = `-- name: RemoveAuctionData :exec
DELETE FROM auction_data WHERE id = $1
`

func (q *Queries) RemoveAuctionData(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.removeAuctionDataStmt, removeAuctionData, id)
	return err
}

const removeRemoteWallet = `-- name: RemoveRemoteWallet :exec
DELETE FROM remote_wallet WHERE auction_data_id = $1
`

func (q *Queries) RemoveRemoteWallet(ctx context.Context, auctionDataID string) error {
	_, err := q.exec(ctx, q.removeRemoteWalletStmt, removeRemoteWallet, auctionDataID)
	return err
}
