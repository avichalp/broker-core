// Code generated by sqlc. DO NOT EDIT.
// source: auction_data.sql

package db

import (
	"context"

	"github.com/textileio/broker-core/broker"
)

const createAuctionData = `-- name: CreateAuctionData :exec
INSERT INTO auction_data(
    id,
    storage_deal_id,
    payload_cid,
    piece_cid,
    piece_size,
    duration
    ) VALUES (
      $1,
      $2,
      $3,
      $4,
      $5,
      $6
      )
`

type CreateAuctionDataParams struct {
	ID            string               `json:"id"`
	StorageDealID broker.StorageDealID `json:"storageDealID"`
	PayloadCid    string               `json:"payloadCid"`
	PieceCid      string               `json:"pieceCid"`
	PieceSize     uint64               `json:"pieceSize"`
	Duration      uint64               `json:"duration"`
}

func (q *Queries) CreateAuctionData(ctx context.Context, arg CreateAuctionDataParams) error {
	_, err := q.exec(ctx, q.createAuctionDataStmt, createAuctionData,
		arg.ID,
		arg.StorageDealID,
		arg.PayloadCid,
		arg.PieceCid,
		arg.PieceSize,
		arg.Duration,
	)
	return err
}

const getAuctionData = `-- name: GetAuctionData :one
SELECT id, storage_deal_id, payload_cid, piece_cid, piece_size, duration, created_at FROM auction_data
WHERE id = $1
`

func (q *Queries) GetAuctionData(ctx context.Context, id string) (AuctionDatum, error) {
	row := q.queryRow(ctx, q.getAuctionDataStmt, getAuctionData, id)
	var i AuctionDatum
	err := row.Scan(
		&i.ID,
		&i.StorageDealID,
		&i.PayloadCid,
		&i.PieceCid,
		&i.PieceSize,
		&i.Duration,
		&i.CreatedAt,
	)
	return i, err
}

const removeAuctionData = `-- name: RemoveAuctionData :exec
DELETE FROM auction_data WHERE id = $1
`

func (q *Queries) RemoveAuctionData(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.removeAuctionDataStmt, removeAuctionData, id)
	return err
}
