// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migrations generated by go-bindata.// sources:
// migrations/001_init.down.sql
// migrations/001_init.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x4a\x2c\x49\xce\x88\x4f\x49\x4c\x2f\xe6\x42\x17\x4d\x2d\xb6\x86\x8a\x45\x06\xc0\x85\xe2\x8b\x4b\x12\x4b\x4a\x8b\xad\xb9\x00\x01\x00\x00\xff\xff\x51\x7a\x82\xf6\x44\x00\x00\x00")

func _001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initDownSql,
		"001_init.down.sql",
	)
}

func _001_initDownSql() (*asset, error) {
	bytes, err := _001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.down.sql", size: 68, mode: os.FileMode(436), modTime: time.Unix(1626890806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\x31\xaf\x9b\x30\x14\x85\x77\x7e\xc5\xdd\x0c\x12\x43\xf7\x4c\x84\x5c\x22\xab\x60\x22\x63\xa4\x64\xb2\x5c\x7c\x93\xa2\x46\x90\x82\x91\xd2\xfe\xfa\x8a\x00\x49\x69\xab\x3e\xe9\x2d\x6f\x61\xf0\x39\xe7\xfa\xdc\xcf\xc4\x12\x23\x85\xa0\x4e\x07\x84\x2f\xc6\x55\x5f\x75\xef\x8c\x1b\x7a\x88\x0a\x40\x51\x66\xe0\xb3\xf6\x46\x0d\x0b\x59\x47\xc6\xfe\x60\x21\xa3\x3b\x55\x83\xab\x9b\x0b\x0b\x99\x6d\x1b\x62\xc1\xc6\xf3\x96\x31\xd1\x36\x45\xe0\x09\x88\x5c\x01\x1e\x79\xa1\x8a\x69\x2a\xf5\xe0\x7b\x00\x30\xdf\x51\x5b\x50\x78\x54\x70\x90\x3c\x8b\xe4\x09\x3e\xe3\x29\x7c\xc8\xf3\xe5\xab\x26\xe3\x2c\x51\xa6\x29\x58\x3a\x9b\xe1\xea\x60\x6e\xf4\x08\xb8\xd6\x99\xab\xee\xeb\x9f\x04\x5b\xbe\xe7\x42\xbd\xec\x3b\x4c\xa2\x32\x55\xf0\x69\x72\x56\x1d\x19\x47\x56\x1b\x07\x8a\x67\x58\xa8\x28\x3b\xfc\x6d\x8e\x4b\x29\x51\x28\xfd\xb4\x4c\xe1\xe1\x66\xdf\x13\xf6\x82\xcd\x82\x86\x8b\x1d\x1e\x17\x18\xf3\x6a\xba\xb6\x77\xc8\xc5\x72\xea\x4f\xa7\xe1\x6f\x55\xdf\x60\xdb\xbb\xb6\x33\x17\xd2\x1d\x7d\x1f\xa8\x77\x0b\xe4\xf6\x46\x9d\x71\x75\xdb\xfc\x0f\xf4\x2a\xf9\x34\x2e\x3b\x4d\x2e\x6b\x9c\xd1\xd5\xbf\xb5\xf5\x4b\xae\xb5\x8f\x60\x3d\x85\x1f\x9f\x38\x17\x85\x92\xd1\xf8\x37\x9c\xbf\xe9\x65\x55\x4b\xe6\x3a\xf6\x4d\x72\x89\x7c\x2f\x46\x16\xfe\x1f\x5a\x00\x12\x13\x94\x28\x62\x7c\xc1\x1d\xb5\xde\xaf\x6d\x30\xbe\xa6\xe7\xfd\x0a\x00\x00\xff\xff\x0f\x53\x5f\x8d\x32\x03\x00\x00")

func _001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_initUpSql,
		"001_init.up.sql",
	)
}

func _001_initUpSql() (*asset, error) {
	bytes, err := _001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_init.up.sql", size: 818, mode: os.FileMode(436), modTime: time.Unix(1626901016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_init.down.sql": _001_initDownSql,
	"001_init.up.sql":   _001_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_init.down.sql": &bintree{_001_initDownSql, map[string]*bintree{}},
	"001_init.up.sql":   &bintree{_001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
