// Code generated by sqlc. DO NOT EDIT.
// source: batches.sql

package db

import (
	"context"
)

const addStorageRequestInBatch = `-- name: AddStorageRequestInBatch :exec
INSERT INTO storage_requests (storage_request_id,data_cid)
VALUES ($1, $2)
`

type AddStorageRequestInBatchParams struct {
	StorageRequestID string `json:"storageRequestID"`
	DataCid          string `json:"dataCid"`
}

func (q *Queries) AddStorageRequestInBatch(ctx context.Context, arg AddStorageRequestInBatchParams) error {
	_, err := q.exec(ctx, q.addStorageRequestInBatchStmt, addStorageRequestInBatch, arg.StorageRequestID, arg.DataCid)
	return err
}

const createOpenBatch = `-- name: CreateOpenBatch :exec
INSERT INTO batches (batch_id) values ($1)
`

func (q *Queries) CreateOpenBatch(ctx context.Context, batchID string) error {
	_, err := q.exec(ctx, q.createOpenBatchStmt, createOpenBatch, batchID)
	return err
}

const findOpenBatchWithSpace = `-- name: FindOpenBatchWithSpace :one
SELECT batch_id, status, total_size, created_at, updated_at
FROM batches
WHERE status = 'open' AND
      total_size <= $1
ORDER BY created_at
`

func (q *Queries) FindOpenBatchWithSpace(ctx context.Context, totalSize int64) (Batch, error) {
	row := q.queryRow(ctx, q.findOpenBatchWithSpaceStmt, findOpenBatchWithSpace, totalSize)
	var i Batch
	err := row.Scan(
		&i.BatchID,
		&i.Status,
		&i.TotalSize,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const moveBatchToStatus = `-- name: MoveBatchToStatus :exec
UPDATE batches
SET status = $2, updated_at = CURRENT_TIMESTAMP
WHERE batch_id = $1
`

type MoveBatchToStatusParams struct {
	BatchID string      `json:"batchID"`
	Status  BatchStatus `json:"status"`
}

func (q *Queries) MoveBatchToStatus(ctx context.Context, arg MoveBatchToStatusParams) error {
	_, err := q.exec(ctx, q.moveBatchToStatusStmt, moveBatchToStatus, arg.BatchID, arg.Status)
	return err
}
