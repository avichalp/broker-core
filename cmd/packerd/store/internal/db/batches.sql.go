// Code generated by sqlc. DO NOT EDIT.
// source: batches.sql

package db

import (
	"context"
	"time"

	"github.com/textileio/broker-core/broker"
)

const addStorageRequestInBatch = `-- name: AddStorageRequestInBatch :exec
INSERT INTO storage_requests (operation_id, storage_request_id, data_cid, batch_id, size)
VALUES ($1,$2,$3,$4,$5)
`

type AddStorageRequestInBatchParams struct {
	OperationID      string                 `json:"operationID"`
	StorageRequestID broker.BrokerRequestID `json:"storageRequestID"`
	DataCid          string                 `json:"dataCid"`
	BatchID          broker.StorageDealID   `json:"batchID"`
	Size             int64                  `json:"size"`
}

func (q *Queries) AddStorageRequestInBatch(ctx context.Context, arg AddStorageRequestInBatchParams) error {
	_, err := q.exec(ctx, q.addStorageRequestInBatchStmt, addStorageRequestInBatch,
		arg.OperationID,
		arg.StorageRequestID,
		arg.DataCid,
		arg.BatchID,
		arg.Size,
	)
	return err
}

const createOpenBatch = `-- name: CreateOpenBatch :exec
INSERT INTO batches (batch_id) values ($1)
`

func (q *Queries) CreateOpenBatch(ctx context.Context, batchID broker.StorageDealID) error {
	_, err := q.exec(ctx, q.createOpenBatchStmt, createOpenBatch, batchID)
	return err
}

const doneBatchStats = `-- name: DoneBatchStats :one
SELECT count(*) as batches_count,
       sum(size) as batches_bytes
FROM batches
where status='done'
`

type DoneBatchStatsRow struct {
	BatchesCount int64 `json:"batchesCount"`
	BatchesBytes int64 `json:"batchesBytes"`
}

func (q *Queries) DoneBatchStats(ctx context.Context) (DoneBatchStatsRow, error) {
	row := q.queryRow(ctx, q.doneBatchStatsStmt, doneBatchStats)
	var i DoneBatchStatsRow
	err := row.Scan(&i.BatchesCount, &i.BatchesBytes)
	return i, err
}

const findOpenBatchWithSpace = `-- name: FindOpenBatchWithSpace :one
SELECT batch_id, status, total_size, ready_at, created_at, updated_at
FROM batches
WHERE status = 'open' AND
      total_size<=$1
ORDER BY created_at
FOR UPDATE
LIMIT 1
`

func (q *Queries) FindOpenBatchWithSpace(ctx context.Context, totalSize int64) (Batch, error) {
	row := q.queryRow(ctx, q.findOpenBatchWithSpaceStmt, findOpenBatchWithSpace, totalSize)
	var i Batch
	err := row.Scan(
		&i.BatchID,
		&i.Status,
		&i.TotalSize,
		&i.ReadyAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNextReadyBatch = `-- name: GetNextReadyBatch :one
UPDATE batches
SET status = 'executing', updated_at = CURRENT_TIMESTAMP
WHERE batch_id = (SELECT b.batch_id FROM batches b
	          WHERE b.status = 'ready'
		  ORDER BY b.ready_at asc
		  FOR UPDATE SKIP LOCKED
	          LIMIT 1)
RETURNING batch_id, total_size
`

type GetNextReadyBatchRow struct {
	BatchID   broker.StorageDealID `json:"batchID"`
	TotalSize int64                `json:"totalSize"`
}

func (q *Queries) GetNextReadyBatch(ctx context.Context) (GetNextReadyBatchRow, error) {
	row := q.queryRow(ctx, q.getNextReadyBatchStmt, getNextReadyBatch)
	var i GetNextReadyBatchRow
	err := row.Scan(&i.BatchID, &i.TotalSize)
	return i, err
}

const getStorageRequestsFromBatch = `-- name: GetStorageRequestsFromBatch :many
SELECT operation_id, storage_request_id, data_cid, batch_id, size, created_at, updated_at FROM storage_requests where batch_id=$1
`

func (q *Queries) GetStorageRequestsFromBatch(ctx context.Context, batchID broker.StorageDealID) ([]StorageRequest, error) {
	rows, err := q.query(ctx, q.getStorageRequestsFromBatchStmt, getStorageRequestsFromBatch, batchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StorageRequest
	for rows.Next() {
		var i StorageRequest
		if err := rows.Scan(
			&i.OperationID,
			&i.StorageRequestID,
			&i.DataCid,
			&i.BatchID,
			&i.Size,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const moveBatchToStatus = `-- name: MoveBatchToStatus :execrows
UPDATE batches
SET status=$2, ready_at=$3, updated_at = CURRENT_TIMESTAMP
WHERE batch_id=$1
`

type MoveBatchToStatusParams struct {
	BatchID broker.StorageDealID `json:"batchID"`
	Status  BatchStatus          `json:"status"`
	ReadyAt time.Time            `json:"readyAt"`
}

func (q *Queries) MoveBatchToStatus(ctx context.Context, arg MoveBatchToStatusParams) (int64, error) {
	result, err := q.exec(ctx, q.moveBatchToStatusStmt, moveBatchToStatus, arg.BatchID, arg.Status, arg.ReadyAt)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const openBatchStats = `-- name: OpenBatchStats :one
SELECT count(*) as batches_cid_count,
       sum(sr.size) as batches_bytes,
       count(DISTINCT sr.batch_id) batches_count
FROM storage_requests sr
JOIN batches b ON b.batch_id=sr.batch_id
WHERE b.status='open'
`

type OpenBatchStatsRow struct {
	BatchesCidCount int64 `json:"batchesCidCount"`
	BatchesBytes    int64 `json:"batchesBytes"`
	BatchesCount    int64 `json:"batchesCount"`
}

func (q *Queries) OpenBatchStats(ctx context.Context) (OpenBatchStatsRow, error) {
	row := q.queryRow(ctx, q.openBatchStatsStmt, openBatchStats)
	var i OpenBatchStatsRow
	err := row.Scan(&i.BatchesCidCount, &i.BatchesBytes, &i.BatchesCount)
	return i, err
}

const updateBatchSize = `-- name: UpdateBatchSize :exec
UPDATE batches
SET total_size=$2
WHERE batch_id=$1
`

type UpdateBatchSizeParams struct {
	BatchID   broker.StorageDealID `json:"batchID"`
	TotalSize int64                `json:"totalSize"`
}

func (q *Queries) UpdateBatchSize(ctx context.Context, arg UpdateBatchSizeParams) error {
	_, err := q.exec(ctx, q.updateBatchSizeStmt, updateBatchSize, arg.BatchID, arg.TotalSize)
	return err
}
