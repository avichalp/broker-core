// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chainapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChainApiServiceClient is the client API for ChainApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainApiServiceClient interface {
	LockInfo(ctx context.Context, in *LockInfoRequest, opts ...grpc.CallOption) (*LockInfoResponse, error)
	HasFunds(ctx context.Context, in *HasFundsRequest, opts ...grpc.CallOption) (*HasFundsResponse, error)
	ReportStorageInfo(ctx context.Context, in *ReportStorageInfoRequest, opts ...grpc.CallOption) (*ReportStorageInfoResponse, error)
	State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error)
}

type chainApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChainApiServiceClient(cc grpc.ClientConnInterface) ChainApiServiceClient {
	return &chainApiServiceClient{cc}
}

func (c *chainApiServiceClient) LockInfo(ctx context.Context, in *LockInfoRequest, opts ...grpc.CallOption) (*LockInfoResponse, error) {
	out := new(LockInfoResponse)
	err := c.cc.Invoke(ctx, "/chainapi.v1.ChainApiService/LockInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainApiServiceClient) HasFunds(ctx context.Context, in *HasFundsRequest, opts ...grpc.CallOption) (*HasFundsResponse, error) {
	out := new(HasFundsResponse)
	err := c.cc.Invoke(ctx, "/chainapi.v1.ChainApiService/HasFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainApiServiceClient) ReportStorageInfo(ctx context.Context, in *ReportStorageInfoRequest, opts ...grpc.CallOption) (*ReportStorageInfoResponse, error) {
	out := new(ReportStorageInfoResponse)
	err := c.cc.Invoke(ctx, "/chainapi.v1.ChainApiService/ReportStorageInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainApiServiceClient) State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, "/chainapi.v1.ChainApiService/State", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainApiServiceServer is the server API for ChainApiService service.
// All implementations must embed UnimplementedChainApiServiceServer
// for forward compatibility
type ChainApiServiceServer interface {
	LockInfo(context.Context, *LockInfoRequest) (*LockInfoResponse, error)
	HasFunds(context.Context, *HasFundsRequest) (*HasFundsResponse, error)
	ReportStorageInfo(context.Context, *ReportStorageInfoRequest) (*ReportStorageInfoResponse, error)
	State(context.Context, *StateRequest) (*StateResponse, error)
	mustEmbedUnimplementedChainApiServiceServer()
}

// UnimplementedChainApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChainApiServiceServer struct {
}

func (UnimplementedChainApiServiceServer) LockInfo(context.Context, *LockInfoRequest) (*LockInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockInfo not implemented")
}
func (UnimplementedChainApiServiceServer) HasFunds(context.Context, *HasFundsRequest) (*HasFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasFunds not implemented")
}
func (UnimplementedChainApiServiceServer) ReportStorageInfo(context.Context, *ReportStorageInfoRequest) (*ReportStorageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStorageInfo not implemented")
}
func (UnimplementedChainApiServiceServer) State(context.Context, *StateRequest) (*StateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (UnimplementedChainApiServiceServer) mustEmbedUnimplementedChainApiServiceServer() {}

// UnsafeChainApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainApiServiceServer will
// result in compilation errors.
type UnsafeChainApiServiceServer interface {
	mustEmbedUnimplementedChainApiServiceServer()
}

func RegisterChainApiServiceServer(s grpc.ServiceRegistrar, srv ChainApiServiceServer) {
	s.RegisterService(&ChainApiService_ServiceDesc, srv)
}

func _ChainApiService_LockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainApiServiceServer).LockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainapi.v1.ChainApiService/LockInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainApiServiceServer).LockInfo(ctx, req.(*LockInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainApiService_HasFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainApiServiceServer).HasFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainapi.v1.ChainApiService/HasFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainApiServiceServer).HasFunds(ctx, req.(*HasFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainApiService_ReportStorageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportStorageInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainApiServiceServer).ReportStorageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainapi.v1.ChainApiService/ReportStorageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainApiServiceServer).ReportStorageInfo(ctx, req.(*ReportStorageInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainApiService_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainApiServiceServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainapi.v1.ChainApiService/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainApiServiceServer).State(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainApiService_ServiceDesc is the grpc.ServiceDesc for ChainApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainapi.v1.ChainApiService",
	HandlerType: (*ChainApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LockInfo",
			Handler:    _ChainApiService_LockInfo_Handler,
		},
		{
			MethodName: "HasFunds",
			Handler:    _ChainApiService_HasFunds_Handler,
		},
		{
			MethodName: "ReportStorageInfo",
			Handler:    _ChainApiService_ReportStorageInfo_Handler,
		},
		{
			MethodName: "State",
			Handler:    _ChainApiService_State_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker/chainapi/v1/chainapi.proto",
}
