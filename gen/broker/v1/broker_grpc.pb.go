// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package broker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIServiceClient is the client API for APIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIServiceClient interface {
	CreateStorageRequest(ctx context.Context, in *CreateStorageRequestRequest, opts ...grpc.CallOption) (*CreateStorageRequestResponse, error)
	CreatePreparedStorageRequest(ctx context.Context, in *CreatePreparedStorageRequestRequest, opts ...grpc.CallOption) (*CreatePreparedStorageRequestResponse, error)
	GetStorageRequestInfo(ctx context.Context, in *GetStorageRequestInfoRequest, opts ...grpc.CallOption) (*GetStorageRequestInfoResponse, error)
}

type aPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServiceClient(cc grpc.ClientConnInterface) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) CreateStorageRequest(ctx context.Context, in *CreateStorageRequestRequest, opts ...grpc.CallOption) (*CreateStorageRequestResponse, error) {
	out := new(CreateStorageRequestResponse)
	err := c.cc.Invoke(ctx, "/broker.v1.APIService/CreateStorageRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CreatePreparedStorageRequest(ctx context.Context, in *CreatePreparedStorageRequestRequest, opts ...grpc.CallOption) (*CreatePreparedStorageRequestResponse, error) {
	out := new(CreatePreparedStorageRequestResponse)
	err := c.cc.Invoke(ctx, "/broker.v1.APIService/CreatePreparedStorageRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetStorageRequestInfo(ctx context.Context, in *GetStorageRequestInfoRequest, opts ...grpc.CallOption) (*GetStorageRequestInfoResponse, error) {
	out := new(GetStorageRequestInfoResponse)
	err := c.cc.Invoke(ctx, "/broker.v1.APIService/GetStorageRequestInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServiceServer is the server API for APIService service.
// All implementations must embed UnimplementedAPIServiceServer
// for forward compatibility
type APIServiceServer interface {
	CreateStorageRequest(context.Context, *CreateStorageRequestRequest) (*CreateStorageRequestResponse, error)
	CreatePreparedStorageRequest(context.Context, *CreatePreparedStorageRequestRequest) (*CreatePreparedStorageRequestResponse, error)
	GetStorageRequestInfo(context.Context, *GetStorageRequestInfoRequest) (*GetStorageRequestInfoResponse, error)
	mustEmbedUnimplementedAPIServiceServer()
}

// UnimplementedAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServiceServer struct {
}

func (UnimplementedAPIServiceServer) CreateStorageRequest(context.Context, *CreateStorageRequestRequest) (*CreateStorageRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorageRequest not implemented")
}
func (UnimplementedAPIServiceServer) CreatePreparedStorageRequest(context.Context, *CreatePreparedStorageRequestRequest) (*CreatePreparedStorageRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePreparedStorageRequest not implemented")
}
func (UnimplementedAPIServiceServer) GetStorageRequestInfo(context.Context, *GetStorageRequestInfoRequest) (*GetStorageRequestInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageRequestInfo not implemented")
}
func (UnimplementedAPIServiceServer) mustEmbedUnimplementedAPIServiceServer() {}

// UnsafeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServiceServer will
// result in compilation errors.
type UnsafeAPIServiceServer interface {
	mustEmbedUnimplementedAPIServiceServer()
}

func RegisterAPIServiceServer(s grpc.ServiceRegistrar, srv APIServiceServer) {
	s.RegisterService(&APIService_ServiceDesc, srv)
}

func _APIService_CreateStorageRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStorageRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateStorageRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.v1.APIService/CreateStorageRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateStorageRequest(ctx, req.(*CreateStorageRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CreatePreparedStorageRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePreparedStorageRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreatePreparedStorageRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.v1.APIService/CreatePreparedStorageRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreatePreparedStorageRequest(ctx, req.(*CreatePreparedStorageRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetStorageRequestInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageRequestInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetStorageRequestInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.v1.APIService/GetStorageRequestInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetStorageRequestInfo(ctx, req.(*GetStorageRequestInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIService_ServiceDesc is the grpc.ServiceDesc for APIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.v1.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStorageRequest",
			Handler:    _APIService_CreateStorageRequest_Handler,
		},
		{
			MethodName: "CreatePreparedStorageRequest",
			Handler:    _APIService_CreatePreparedStorageRequest_Handler,
		},
		{
			MethodName: "GetStorageRequestInfo",
			Handler:    _APIService_GetStorageRequestInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker/v1/broker.proto",
}
